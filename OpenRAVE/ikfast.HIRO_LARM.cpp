/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 56 generated on 2012-08-08 15:11:53.030209
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[4]);
x6=((x0)*(x2)*(x3));
x7=((x0)*(x1)*(x4));
x8=((x7)+(x6));
x9=((-1.00000000000000)*(x8));
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=IKsin(j[3]);
x13=((x11)*(x12));
x14=IKcos(j[3]);
x15=((x0)*(x1)*(x2));
x16=((x0)*(x3)*(x4));
x17=((((-1.00000000000000)*(x16)))+(x15));
x18=((x14)*(x17));
x19=IKcos(j[5]);
x20=((x5)*(x9));
x21=((x13)+(((-1.00000000000000)*(x18))));
x22=((x10)*(x21));
x23=((x20)+(x22));
x24=((-1.00000000000000)*(x23));
x25=IKsin(j[5]);
x26=((x11)*(x14));
x27=((((-1.00000000000000)*(x15)))+(x16));
x28=((x12)*(x27));
x29=((x2)*(x3));
x30=((x1)*(x4));
x31=((x29)+(x30));
x32=((x11)*(x29));
x33=((x11)*(x30));
x34=((x33)+(x32));
x35=((-1.00000000000000)*(x34));
x36=((x1)*(x11)*(x2));
x37=((x11)*(x3)*(x4));
x38=((x36)+(((-1.00000000000000)*(x37))));
x39=((x14)*(x38));
x40=((x0)*(x12));
x41=((x40)+(x39));
x42=((x3)*(x4));
x43=((x1)*(x2));
x44=((x42)+(((-1.00000000000000)*(x43))));
x45=((x44)*(x5));
x46=((x10)*(x14)*(x31));
x47=((x46)+(x45));
x48=((-1.00000000000000)*(x47));
x49=((x35)*(x5));
x50=((-1.00000000000000)*(x41));
x51=((x10)*(x50));
x52=((x51)+(x49));
x53=((-1.00000000000000)*(x52));
x54=((-1.00000000000000)*(x31));
x55=((x0)*(x14));
x56=((x37)+(((-1.00000000000000)*(x36))));
x57=((x12)*(x56));
x58=((x55)+(x57));
x59=((-1.00000000000000)*(x58));
x60=((0.0800000000000000)*(x42));
x61=((0.0800000000000000)*(x43));
x62=((x60)+(((-1.00000000000000)*(x61))));
x63=((0.0800000000000000)*(x29));
x64=((0.0800000000000000)*(x30));
x65=((x63)+(x64));
x66=((0.0190000000000000)*(x29));
x67=((0.0190000000000000)*(x30));
x68=((x66)+(x67));
x69=((0.0190000000000000)*(x43));
x70=((0.0190000000000000)*(x42));
x71=((x69)+(((-1.00000000000000)*(x70))));
x72=((0.0800000000000000)*(x32));
x73=((0.0800000000000000)*(x33));
x74=((x73)+(x72));
x75=((-1.00000000000000)*(x74));
x76=((0.0190000000000000)*(x32));
x77=((0.0190000000000000)*(x33));
x78=((x77)+(x76));
eerot[0]=((((x10)*(x9)))+(((x5)*(((x18)+(((-1.00000000000000)*(x13))))))));
eerot[1]=((((x24)*(x25)))+(((x19)*(((x28)+(((-1.00000000000000)*(x26))))))));
eerot[2]=((((x19)*(x24)))+(((x25)*(((x26)+(((-1.00000000000000)*(x28))))))));
eetrans[0]=((((x5)*(((((-0.0800000000000000)*(x6)))+(((-0.0800000000000000)*(x7)))))))+(((x10)*(((((0.0800000000000000)*(x13)))+(((-0.0800000000000000)*(x18)))))))+(((-0.0200000000000000)*(x15)))+(((x10)*(((((0.0190000000000000)*(x7)))+(((0.0190000000000000)*(x6)))))))+(((-0.0800000000000000)*(x11)))+(((-0.250000000000000)*(x0)*(x3)))+(((-0.230000000000000)*(x7)))+(((0.0200000000000000)*(x16)))+(((x5)*(((((-0.0190000000000000)*(x18)))+(((0.0190000000000000)*(x13)))))))+(((-0.230000000000000)*(x6))));
eerot[3]=((((0.258820142606703)*(x14)*(x5)*(x54)))+(((0.965925532213041)*(x10)*(x35)))+(((0.965925532213041)*(x41)*(x5)))+(((0.258820142606703)*(x10)*(x44))));
eerot[4]=((((0.965925532213041)*(x25)*(x53)))+(((0.258820142606703)*(x12)*(x19)*(x31)))+(((0.258820142606703)*(x25)*(x48)))+(((0.965925532213041)*(x19)*(x58))));
eerot[5]=((((0.965925532213041)*(x19)*(x53)))+(((0.965925532213041)*(x25)*(x59)))+(((0.258820142606703)*(x12)*(x25)*(x54)))+(((0.258820142606703)*(x19)*(x48))));
eetrans[1]=((0.150000000000000)+(((0.965925532213041)*(x5)*(x75)))+(((0.965925532213041)*(x10)*(((((-0.0800000000000000)*(x39)))+(((-0.0800000000000000)*(x40)))))))+(((0.0595286327995416)*(x42)))+(((0.258820142606703)*(x5)*(x62)))+(((-0.222162872408999)*(x32)))+(((0.258820142606703)*(x14)*(x5)*(x68)))+(((0.0193185106442608)*(x37)))+(((-0.0647050356516757)*(x1)))+(((0.965925532213041)*(x5)*(((((-0.0190000000000000)*(x40)))+(((-0.0190000000000000)*(x39)))))))+(((0.0772740425770433)*(x0)))+(((0.965925532213041)*(x10)*(x78)))+(((0.00517640285213405)*(x29)))+(((0.258820142606703)*(x10)*(x14)*(x65)))+(((-0.222162872408999)*(x33)))+(((-0.0193185106442608)*(x36)))+(((0.00517640285213405)*(x30)))+(((0.258820142606703)*(x10)*(x71)))+(((-0.0595286327995416)*(x43)))+(((-0.241481383053260)*(x11)*(x3))));
eerot[6]=((((0.965925532213041)*(x10)*(x44)))+(((0.965925532213041)*(x14)*(x5)*(x54)))+(((-0.258820142606703)*(x10)*(x35)))+(((-0.258820142606703)*(x41)*(x5))));
eerot[7]=((((-0.258820142606703)*(x19)*(x58)))+(((0.965925532213041)*(x12)*(x19)*(x31)))+(((-0.258820142606703)*(x25)*(x53)))+(((0.965925532213041)*(x25)*(x48))));
eerot[8]=((((0.965925532213041)*(x19)*(x48)))+(((-0.258820142606703)*(x25)*(x59)))+(((-0.258820142606703)*(x19)*(x53)))+(((0.965925532213041)*(x12)*(x25)*(x54))));
eetrans[2]=((0.355000000000000)+(((-0.258820142606703)*(x5)*(((((-0.0190000000000000)*(x40)))+(((-0.0190000000000000)*(x39)))))))+(((0.0595286327995416)*(x33)))+(((0.965925532213041)*(x10)*(x71)))+(((0.0193185106442608)*(x29)))+(((-0.258820142606703)*(x10)*(((((-0.0800000000000000)*(x39)))+(((-0.0800000000000000)*(x40)))))))+(((-0.241481383053260)*(x1)))+(((0.965925532213041)*(x14)*(x5)*(x68)))+(((0.965925532213041)*(x5)*(x62)))+(((0.965925532213041)*(x10)*(x14)*(x65)))+(((0.222162872408999)*(x42)))+(((-0.258820142606703)*(x10)*(x78)))+(((0.00517640285213405)*(x36)))+(((0.0647050356516757)*(x11)*(x3)))+(((-0.258820142606703)*(x5)*(x75)))+(((0.0193185106442608)*(x30)))+(((0.0595286327995416)*(x32)))+(((-0.222162872408999)*(x43)))+(((-0.0207056114085362)*(x0)))+(((-0.00517640285213405)*(x37))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j9,cj9,sj9,htj9,j10,cj10,sj10,htj10,j11,cj11,sj11,htj11,j12,cj12,sj12,htj12,j13,cj13,sj13,htj13,j14,cj14,sj14,htj14,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j9=numeric_limits<IKReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IKReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IKReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IKReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IKReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IKReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r02));
new_r01=r01;
new_r02=r00;
new_px=((((0.0190000000000000)*(r00)))+(px));
new_r10=((((0.258820142606703)*(r22)))+(((-0.965925532213041)*(r12))));
new_r11=((((-0.258820142606703)*(r21)))+(((0.965925532213041)*(r11))));
new_r12=((((0.965925532213041)*(r10)))+(((-0.258820142606703)*(r20))));
new_py=((-0.0530076792065767)+(((-0.00491758270952735)*(r20)))+(((0.965925532213041)*(py)))+(((-0.258820142606703)*(pz)))+(((0.0183525851120478)*(r10))));
new_r20=((((-0.965925532213041)*(r22)))+(((-0.258820142606703)*(r12))));
new_r21=((((0.965925532213041)*(r21)))+(((0.258820142606703)*(r11))));
new_r22=((((0.965925532213041)*(r20)))+(((0.258820142606703)*(r10))));
new_pz=((-0.381726585326635)+(((0.258820142606703)*(py)))+(((0.965925532213041)*(pz)))+(((0.0183525851120478)*(r20)))+(((0.00491758270952735)*(r10))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((pz)*(r10)))+(((-1.00000000000000)*(py)*(r20))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((-1.00000000000000)*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((-1.00000000000000)*(py)*(r21))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
IKReal op[72], zeror[48];
int numroots;
IKReal x79=((0.620000000000000)*(npx));
IKReal x80=((0.0400000000000000)*(npz));
IKReal x81=((0.0400000000000000)*(npy));
IKReal x82=((0.0800000000000000)*(r22));
IKReal x83=((0.0800000000000000)*(npx));
IKReal x84=((-1.24000000000000)*(npy));
IKReal x85=((-0.0800000000000000)*(r21));
IKReal x86=((rxp0_2)+(x82));
IKReal x87=((-0.160000000000000)*(r20));
IKReal x88=((2.00000000000000)*(rxp1_2));
IKReal x89=((0.0800000000000000)*(r21));
IKReal x90=((0.920000000000000)*(npz));
IKReal x91=((0.160000000000000)*(r20));
IKReal x92=((2.00000000000000)*(rxp2_2));
IKReal x93=((0.160000000000000)*(r21));
IKReal x94=((0.320000000000000)*(r20));
IKReal x95=((0.320000000000000)*(r21));
IKReal x96=((0.00320000000000000)+(x81));
IKReal x97=((0.300000000000000)*(npx));
IKReal x98=((0.00320000000000000)+(((-1.00000000000000)*(x81))));
IKReal x99=((((-1.00000000000000)*(x82)))+(rxp0_2));
IKReal x100=((-1.00000000000000)*(x86));
IKReal x101=((-0.00640000000000000)+(x96));
IKReal x102=((0.600000000000000)*(npy));
IKReal x103=((-0.00320000000000000)+(((-1.00000000000000)*(x81))));
IKReal x104=((pp)+(x80));
IKReal x105=((-2.00000000000000)*(rxp1_2));
IKReal x106=((((-1.00000000000000)*(rxp0_2)))+(x82));
op[0]=((-0.0276000000000000)+(x79)+(((-1.00000000000000)*(x104))));
op[1]=x96;
op[2]=x84;
op[3]=x83;
op[4]=((-0.0276000000000000)+(((-1.00000000000000)*(x79)))+(((-1.00000000000000)*(x104))));
op[5]=x98;
op[6]=x106;
op[7]=x85;
op[8]=x88;
op[9]=x87;
op[10]=x86;
op[11]=x89;
op[12]=x101;
op[13]=((-0.0276000000000000)+(x79)+(((-1.00000000000000)*(pp)))+(x80));
op[14]=x83;
op[15]=x84;
op[16]=x103;
op[17]=((-0.0276000000000000)+(((-1.00000000000000)*(x79)))+(((-1.00000000000000)*(pp)))+(x80));
op[18]=x85;
op[19]=x100;
op[20]=x87;
op[21]=x88;
op[22]=x89;
op[23]=x99;
op[24]=((-0.00640000000000000)+(x83)+(x90));
op[25]=0;
op[26]=((-0.160000000000000)*(npy));
op[27]=0;
op[28]=((-0.00640000000000000)+(((-1.00000000000000)*(x83)))+(x90));
op[29]=0;
op[30]=((((-1.00000000000000)*(x92)))+(((-1.00000000000000)*(x91)))+(x93));
op[31]=0;
op[32]=((x95)+(x94));
op[33]=0;
op[34]=((((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x92)))+(x91));
op[35]=0;
op[36]=0;
op[37]=((0.00640000000000000)+(((-1.00000000000000)*(x83)))+(x90));
op[38]=0;
op[39]=((0.160000000000000)*(npy));
op[40]=0;
op[41]=((0.00640000000000000)+(x83)+(x90));
op[42]=0;
op[43]=((((-1.00000000000000)*(x92)))+(x91)+(x93));
op[44]=0;
op[45]=((((-1.00000000000000)*(x95)))+(x94));
op[46]=0;
op[47]=((((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x92)))+(((-1.00000000000000)*(x91))));
op[48]=((0.0460000000000000)+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(pp)))+(x80));
op[49]=x96;
op[50]=x102;
op[51]=x83;
op[52]=((0.0460000000000000)+(((-1.00000000000000)*(pp)))+(x80)+(x97));
op[53]=x98;
op[54]=x99;
op[55]=x85;
op[56]=x105;
op[57]=x87;
op[58]=x100;
op[59]=x89;
op[60]=x101;
op[61]=((0.0460000000000000)+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x104))));
op[62]=x83;
op[63]=x102;
op[64]=x103;
op[65]=((0.0460000000000000)+(((-1.00000000000000)*(x104)))+(x97));
op[66]=x85;
op[67]=x86;
op[68]=x87;
op[69]=x105;
op[70]=x89;
op[71]=x106;
solvedialyticpoly8qep(op,zeror,numroots);
IKReal j13array[16], cj13array[16], sj13array[16], j14array[16], cj14array[16], sj14array[16], j12array[16], cj12array[16], sj12array[16];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ij13 += 3)
{
IKReal htj13 = zeror[ij13+0], htj14 = zeror[ij13+1], htj12 = zeror[ij13+2];
j13array[numsolutions]=((2.00000000000000)*(atan(htj13)));
j14array[numsolutions]=((2.00000000000000)*(atan(htj14)));
j12array[numsolutions]=((2.00000000000000)*(atan(htj12)));
IKReal x107=(htj13)*(htj13);
IKReal x108=(htj14)*(htj14);
IKReal x109=(htj12)*(htj12);
cj13array[numsolutions]=((((IKabs(((1.00000000000000)+(x107))) != 0)?((IKReal)1/(((1.00000000000000)+(x107)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x107))))));
cj14array[numsolutions]=((((IKabs(((1.00000000000000)+(x108))) != 0)?((IKReal)1/(((1.00000000000000)+(x108)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x108))))));
cj12array[numsolutions]=((((IKabs(((1.00000000000000)+(x109))) != 0)?((IKReal)1/(((1.00000000000000)+(x109)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x109))))));
sj13array[numsolutions]=((2.00000000000000)*(htj13)*(((IKabs(((1.00000000000000)+((htj13)*(htj13)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj13)*(htj13))))):(IKReal)1.0e30)));
sj14array[numsolutions]=((2.00000000000000)*(htj14)*(((IKabs(((1.00000000000000)+((htj14)*(htj14)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj14)*(htj14))))):(IKReal)1.0e30)));
sj12array[numsolutions]=((2.00000000000000)*(htj12)*(((IKabs(((1.00000000000000)+((htj12)*(htj12)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj12)*(htj12))))):(IKReal)1.0e30)));
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j13valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj13 = 16;
_nj14 = 1;
_nj12 = 1;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
_ij14[0] = 0; _ij14[1] = -1;
_ij12[0] = 0; _ij12[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( !j13valid[iij13] ) { continue; }
if( IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(cj14array[ij13]-cj14array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij13]-sj14array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(cj12array[ij13]-cj12array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij13]-sj12array[iij13]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j13valid[iij13]=false; _ij13[1] = iij13; _ij14[1] = 0; _ij12[1] = 0;  break; 
}
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

    j14 = j14array[ij13]; cj14 = cj14array[ij13]; sj14 = sj14array[ij13];

    j12 = j12array[ij13]; cj12 = cj12array[ij13]; sj12 = sj12array[ij13];

{
IKReal dummyeval[1];
IKReal gconst0;
IKReal x110=(cj14)*(cj14);
IKReal x111=(sj14)*(sj14);
gconst0=IKsign(((((-1.00000000000000)*(cj13)*(r01)*(r10)*(x111)))+(((cj13)*(r00)*(r11)*(x111)))+(((cj14)*(r02)*(r11)*(sj13)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((r02)*(r10)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x110)))+(((cj13)*(r00)*(r11)*(x110)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14)))));
IKReal x112=(cj14)*(cj14);
IKReal x113=(sj14)*(sj14);
dummyeval[0]=((((cj13)*(r00)*(r11)*(x113)))+(((cj13)*(r00)*(r11)*(x112)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x112)))+(((cj14)*(r02)*(r11)*(sj13)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x113)))+(((r02)*(r10)*(sj13)*(sj14)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j12)), 6.28318530717959)));
evalcond[1]=((((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((-0.0800000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[2];
evalcond[0]=((-0.0200000000000000)+(((cj14)*(npy)))+(((npx)*(sj14)))+(((0.250000000000000)*(IKsin(j11)))));
evalcond[1]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst24;
gconst24=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst23;
IKReal x114=(sj14)*(sj14);
IKReal x115=(cj14)*(cj14);
gconst23=IKsign(((((-1.00000000000000)*(cj13)*(cj14)*(r01)*(r12)))+(((r01)*(r10)*(sj13)*(x114)))+(((-1.00000000000000)*(cj13)*(r00)*(r12)*(sj14)))+(((-1.00000000000000)*(r00)*(r11)*(sj13)*(x115)))+(((cj13)*(cj14)*(r02)*(r11)))+(((cj13)*(r02)*(r10)*(sj14)))+(((r01)*(r10)*(sj13)*(x115)))+(((-1.00000000000000)*(r00)*(r11)*(sj13)*(x114)))));
IKReal x116=(sj14)*(sj14);
IKReal x117=(cj14)*(cj14);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r11)*(sj13)*(x116)))+(((-1.00000000000000)*(cj13)*(cj14)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj13)*(x117)))+(((r01)*(r10)*(sj13)*(x117)))+(((-1.00000000000000)*(cj13)*(r00)*(r12)*(sj14)))+(((r01)*(r10)*(sj13)*(x116)))+(((cj13)*(cj14)*(r02)*(r11)))+(((cj13)*(r02)*(r10)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst23)*(((((-1.00000000000000)*(r10)*(sj14)))+(((-1.00000000000000)*(cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst23)*(((((-1.00000000000000)*(r10)*(sj14)))+(((-1.00000000000000)*(cj14)*(r11)))))), ((gconst23)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[4];
IKReal x118=IKsin(j9);
IKReal x119=IKcos(j9);
evalcond[0]=((((-1.00000000000000)*(r10)*(sj14)*(x119)))+(((cj14)*(r01)*(x118)))+(((-1.00000000000000)*(cj14)*(r11)*(x119)))+(((r00)*(sj14)*(x118))));
evalcond[1]=((((cj13)*(r01)*(sj14)*(x118)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x119)))+(((r12)*(sj13)*(x119)))+(((cj13)*(cj14)*(r10)*(x119)))+(((-1.00000000000000)*(r02)*(sj13)*(x118)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x118))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r12)*(x119)))+(((cj13)*(r02)*(x118)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x118)))+(((cj14)*(r10)*(sj13)*(x119)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x119)))+(((r01)*(sj13)*(sj14)*(x118))));
evalcond[3]=((((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x119)))+(((cj14)*(r10)*(sj13)*(x118)))+(((-1.00000000000000)*(cj13)*(r12)*(x118)))+(((-1.00000000000000)*(cj13)*(r02)*(x119)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x118)))+(((cj14)*(r00)*(sj13)*(x119))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst25;
gconst25=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst25)*(((((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((cj13)*(cj14)*(r20)*(sj11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst25)*(((((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((cj13)*(cj14)*(r20)*(sj11)))))), ((gconst25)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x120=IKsin(j10);
IKReal x121=IKcos(j10);
IKReal x122=((sj11)*(x120));
IKReal x123=((cj11)*(x121));
IKReal x124=((cj11)*(x120));
IKReal x125=((sj11)*(x121));
evalcond[0]=((((r20)*(sj14)))+(((cj14)*(r21)))+(((-1.00000000000000)*(x124)))+(((-1.00000000000000)*(x125))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj13)))+(x122)+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(x123))));
evalcond[2]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(x122)+(((-1.00000000000000)*(r10)*(sj14)*(sj9)))+(((-1.00000000000000)*(x123))));
evalcond[3]=((((cj13)*(cj14)*(cj9)*(r00)))+(x124)+(x125)+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst24)*(((((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((cj13)*(cj14)*(r20)*(sj11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst24)*(((((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((cj13)*(cj14)*(r20)*(sj11)))))), ((gconst24)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[2];
IKReal x126=IKsin(j10);
IKReal x127=IKcos(j10);
evalcond[0]=((((r20)*(sj14)))+(((cj14)*(r21)))+(((-1.00000000000000)*(sj11)*(x127)))+(((-1.00000000000000)*(cj11)*(x126))));
evalcond[1]=((((sj11)*(x126)))+(((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(cj11)*(x127))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst26;
IKReal x128=(sj14)*(sj14);
IKReal x129=(cj14)*(cj14);
gconst26=IKsign(((((-1.00000000000000)*(x129)*((r11)*(r11))))+(((-1.00000000000000)*(x129)*((r01)*(r01))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x128)*((r00)*(r00))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x128)*((r10)*(r10))))));
IKReal x130=(sj14)*(sj14);
IKReal x131=(cj14)*(cj14);
dummyeval[0]=((((-1.00000000000000)*(x130)*((r10)*(r10))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x130)*((r00)*(r00))))+(((-1.00000000000000)*(x131)*((r01)*(r01))))+(((-1.00000000000000)*(x131)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst26)*(((((cj10)*(cj11)*(cj14)*(r11)))+(((-1.00000000000000)*(r10)*(sj10)*(sj11)*(sj14)))+(((cj10)*(cj11)*(r10)*(sj14)))+(((-1.00000000000000)*(cj14)*(r11)*(sj10)*(sj11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((cj10)*(cj11)*(cj14)*(r01)))+(((cj10)*(cj11)*(r00)*(sj14)))+(((-1.00000000000000)*(r00)*(sj10)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj14)*(r01)*(sj10)*(sj11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst26)*(((((cj10)*(cj11)*(cj14)*(r11)))+(((-1.00000000000000)*(r10)*(sj10)*(sj11)*(sj14)))+(((cj10)*(cj11)*(r10)*(sj14)))+(((-1.00000000000000)*(cj14)*(r11)*(sj10)*(sj11)))))), ((gconst26)*(((((cj10)*(cj11)*(cj14)*(r01)))+(((cj10)*(cj11)*(r00)*(sj14)))+(((-1.00000000000000)*(r00)*(sj10)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj14)*(r01)*(sj10)*(sj11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x132=IKsin(j9);
IKReal x133=IKcos(j9);
evalcond[0]=((((cj14)*(r01)*(x132)))+(((r00)*(sj14)*(x132)))+(((-1.00000000000000)*(cj14)*(r11)*(x133)))+(((-1.00000000000000)*(r10)*(sj14)*(x133))));
evalcond[1]=((((-1.00000000000000)*(cj14)*(r11)*(x132)))+(((sj10)*(sj11)))+(((-1.00000000000000)*(cj14)*(r01)*(x133)))+(((-1.00000000000000)*(r10)*(sj14)*(x132)))+(((-1.00000000000000)*(cj10)*(cj11)))+(((-1.00000000000000)*(r00)*(sj14)*(x133))));
evalcond[2]=((((cj13)*(r01)*(sj14)*(x132)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x132)))+(((r12)*(sj13)*(x133)))+(((-1.00000000000000)*(r02)*(sj13)*(x132)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x133)))+(((cj13)*(cj14)*(r10)*(x133))));
evalcond[3]=((1.00000000000000)+(((cj13)*(r02)*(x132)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x133)))+(((r01)*(sj13)*(sj14)*(x132)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x132)))+(((-1.00000000000000)*(cj13)*(r12)*(x133)))+(((cj14)*(r10)*(sj13)*(x133))));
evalcond[4]=((((r12)*(sj13)*(x132)))+(((cj13)*(cj14)*(r10)*(x132)))+(((cj10)*(sj11)))+(((cj13)*(cj14)*(r00)*(x133)))+(((r02)*(sj13)*(x133)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x132)))+(((cj11)*(sj10)))+(((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x133))));
evalcond[5]=((((-1.00000000000000)*(cj13)*(r12)*(x132)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x133)))+(((-1.00000000000000)*(cj13)*(r02)*(x133)))+(((cj14)*(r10)*(sj13)*(x132)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x132)))+(((cj14)*(r00)*(sj13)*(x133))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j12)), 6.28318530717959)));
evalcond[1]=((((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((0.0800000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj14)))+(((4.00000000000000)*(cj14)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj14)))+(((4.00000000000000)*(cj14)*(npy)))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj14)))+(((4.00000000000000)*(cj14)*(npy)))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[2];
evalcond[0]=((0.0200000000000000)+(((cj14)*(npy)))+(((-0.250000000000000)*(IKsin(j11))))+(((npx)*(sj14))));
evalcond[1]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst29;
gconst29=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst28;
IKReal x134=(cj14)*(cj14);
IKReal x135=(sj14)*(sj14);
gconst28=IKsign(((((-1.00000000000000)*(cj13)*(r02)*(r10)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r02)*(r11)))+(((r00)*(r11)*(sj13)*(x135)))+(((r00)*(r11)*(sj13)*(x134)))+(((cj13)*(r00)*(r12)*(sj14)))+(((-1.00000000000000)*(r01)*(r10)*(sj13)*(x135)))+(((cj13)*(cj14)*(r01)*(r12)))+(((-1.00000000000000)*(r01)*(r10)*(sj13)*(x134)))));
IKReal x136=(cj14)*(cj14);
IKReal x137=(sj14)*(sj14);
dummyeval[0]=((((-1.00000000000000)*(cj13)*(r02)*(r10)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r02)*(r11)))+(((-1.00000000000000)*(r01)*(r10)*(sj13)*(x136)))+(((-1.00000000000000)*(r01)*(r10)*(sj13)*(x137)))+(((r00)*(r11)*(sj13)*(x136)))+(((cj13)*(r00)*(r12)*(sj14)))+(((cj13)*(cj14)*(r01)*(r12)))+(((r00)*(r11)*(sj13)*(x137))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst28)*(((((-1.00000000000000)*(r10)*(sj14)))+(((-1.00000000000000)*(cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst28)*(((((-1.00000000000000)*(r10)*(sj14)))+(((-1.00000000000000)*(cj14)*(r11)))))), ((gconst28)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[4];
IKReal x138=IKsin(j9);
IKReal x139=IKcos(j9);
evalcond[0]=((((-1.00000000000000)*(r10)*(sj14)*(x139)))+(((-1.00000000000000)*(cj14)*(r11)*(x139)))+(((r00)*(sj14)*(x138)))+(((cj14)*(r01)*(x138))));
evalcond[1]=((((cj13)*(cj14)*(r10)*(x139)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x138)))+(((-1.00000000000000)*(r02)*(sj13)*(x138)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x139)))+(((cj13)*(r01)*(sj14)*(x138)))+(((r12)*(sj13)*(x139))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x138)))+(((cj13)*(r02)*(x138)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x139)))+(((r01)*(sj13)*(sj14)*(x138)))+(((-1.00000000000000)*(cj13)*(r12)*(x139)))+(((cj14)*(r10)*(sj13)*(x139))));
evalcond[3]=((((-1.00000000000000)*(cj13)*(r12)*(x138)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x138)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x139)))+(((cj14)*(r10)*(sj13)*(x138)))+(((cj14)*(r00)*(sj13)*(x139)))+(((-1.00000000000000)*(cj13)*(r02)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst30;
gconst30=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst30)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst30)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst30)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x140=IKsin(j10);
IKReal x141=IKcos(j10);
IKReal x142=((cj11)*(x141));
IKReal x143=((sj11)*(x140));
IKReal x144=((cj11)*(x140));
IKReal x145=((sj11)*(x141));
evalcond[0]=((((r20)*(sj14)))+(((cj14)*(r21)))+(x144)+(x145));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj13)))+(((-1.00000000000000)*(x142)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(x143));
evalcond[2]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9)))+(x142)+(((-1.00000000000000)*(x143))));
evalcond[3]=((((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(x144)+(x145)+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst29)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst29)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst29)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[2];
IKReal x146=IKsin(j10);
IKReal x147=IKcos(j10);
evalcond[0]=((((r20)*(sj14)))+(((sj11)*(x147)))+(((cj11)*(x146)))+(((cj14)*(r21))));
evalcond[1]=((((-1.00000000000000)*(cj11)*(x147)))+(((-1.00000000000000)*(r22)*(sj13)))+(((sj11)*(x146)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst31;
IKReal x148=(sj14)*(sj14);
IKReal x149=(cj14)*(cj14);
gconst31=IKsign(((((-1.00000000000000)*(x148)*((r00)*(r00))))+(((-1.00000000000000)*(x148)*((r10)*(r10))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x149)*((r11)*(r11))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x149)*((r01)*(r01))))));
IKReal x150=(sj14)*(sj14);
IKReal x151=(cj14)*(cj14);
dummyeval[0]=((((-1.00000000000000)*(x151)*((r01)*(r01))))+(((-1.00000000000000)*(x150)*((r10)*(r10))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x150)*((r00)*(r00))))+(((-1.00000000000000)*(x151)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst31)*(((((r10)*(sj10)*(sj11)*(sj14)))+(((cj14)*(r11)*(sj10)*(sj11)))+(((-1.00000000000000)*(cj10)*(cj11)*(cj14)*(r11)))+(((-1.00000000000000)*(cj10)*(cj11)*(r10)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((-1.00000000000000)*(cj10)*(cj11)*(r00)*(sj14)))+(((-1.00000000000000)*(cj10)*(cj11)*(cj14)*(r01)))+(((cj14)*(r01)*(sj10)*(sj11)))+(((r00)*(sj10)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst31)*(((((r10)*(sj10)*(sj11)*(sj14)))+(((cj14)*(r11)*(sj10)*(sj11)))+(((-1.00000000000000)*(cj10)*(cj11)*(cj14)*(r11)))+(((-1.00000000000000)*(cj10)*(cj11)*(r10)*(sj14)))))), ((gconst31)*(((((-1.00000000000000)*(cj10)*(cj11)*(r00)*(sj14)))+(((-1.00000000000000)*(cj10)*(cj11)*(cj14)*(r01)))+(((cj14)*(r01)*(sj10)*(sj11)))+(((r00)*(sj10)*(sj11)*(sj14)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x152=IKsin(j9);
IKReal x153=IKcos(j9);
evalcond[0]=((((cj14)*(r01)*(x152)))+(((-1.00000000000000)*(r10)*(sj14)*(x153)))+(((r00)*(sj14)*(x152)))+(((-1.00000000000000)*(cj14)*(r11)*(x153))));
evalcond[1]=((((-1.00000000000000)*(r10)*(sj14)*(x152)))+(((-1.00000000000000)*(r00)*(sj14)*(x153)))+(((-1.00000000000000)*(cj14)*(r01)*(x153)))+(((-1.00000000000000)*(sj10)*(sj11)))+(((cj10)*(cj11)))+(((-1.00000000000000)*(cj14)*(r11)*(x152))));
evalcond[2]=((((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x153)))+(((r12)*(sj13)*(x153)))+(((cj13)*(r01)*(sj14)*(x152)))+(((-1.00000000000000)*(r02)*(sj13)*(x152)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x152)))+(((cj13)*(cj14)*(r10)*(x153))));
evalcond[3]=((-1.00000000000000)+(((r01)*(sj13)*(sj14)*(x152)))+(((-1.00000000000000)*(cj13)*(r12)*(x153)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x152)))+(((cj13)*(r02)*(x152)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x153)))+(((cj14)*(r10)*(sj13)*(x153))));
evalcond[4]=((((cj13)*(cj14)*(r00)*(x153)))+(((r12)*(sj13)*(x152)))+(((cj10)*(sj11)))+(((cj13)*(cj14)*(r10)*(x152)))+(((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x153)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x152)))+(((cj11)*(sj10)))+(((r02)*(sj13)*(x153))));
evalcond[5]=((((-1.00000000000000)*(cj13)*(r12)*(x152)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x153)))+(((cj14)*(r10)*(sj13)*(x152)))+(((-1.00000000000000)*(cj13)*(r02)*(x153)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x152)))+(((cj14)*(r00)*(sj13)*(x153))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j12)), 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((0.0800000000000000)+(((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14)))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((0.0800000000000000)+(((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14)))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[2];
evalcond[0]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
evalcond[1]=((0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((-0.250000000000000)*(IKsin(j11))))+(((cj13)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst33;
IKReal x154=(sj14)*(sj14);
IKReal x155=(cj14)*(cj14);
gconst33=IKsign(((((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x155)*((r01)*(r01))))+(((x154)*((r10)*(r10))))+(((x155)*((r11)*(r11))))+(((x154)*((r00)*(r00))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))));
IKReal x156=(sj14)*(sj14);
IKReal x157=(cj14)*(cj14);
dummyeval[0]=((((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x156)*((r00)*(r00))))+(((x156)*((r10)*(r10))))+(((x157)*((r11)*(r11))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((x157)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst34;
gconst34=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst34)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst34)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst34)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[2];
IKReal x158=IKsin(j10);
IKReal x159=IKcos(j10);
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(((-1.00000000000000)*(cj11)*(x159)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((sj11)*(x158))));
evalcond[1]=((((sj11)*(x159)))+(((cj11)*(x158)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst35;
IKReal x160=(sj14)*(sj14);
IKReal x161=(cj14)*(cj14);
gconst35=IKsign(((((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x161)*((r11)*(r11))))+(((x161)*((r01)*(r01))))+(((x160)*((r00)*(r00))))+(((x160)*((r10)*(r10))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))));
IKReal x162=(sj14)*(sj14);
IKReal x163=(cj14)*(cj14);
dummyeval[0]=((((x163)*((r01)*(r01))))+(((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x163)*((r11)*(r11))))+(((x162)*((r10)*(r10))))+(((x162)*((r00)*(r00))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst35)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst35)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst35)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x164=IKsin(j9);
IKReal x165=IKcos(j9);
evalcond[0]=((1.00000000000000)+(((r00)*(sj14)*(x164)))+(((cj14)*(r01)*(x164)))+(((-1.00000000000000)*(r10)*(sj14)*(x165)))+(((-1.00000000000000)*(cj14)*(r11)*(x165))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj14)*(x165)))+(((-1.00000000000000)*(cj14)*(r11)*(x164)))+(((-1.00000000000000)*(cj14)*(r01)*(x165)))+(((-1.00000000000000)*(r10)*(sj14)*(x164))));
evalcond[2]=((((-1.00000000000000)*(r02)*(sj13)*(x164)))+(((cj13)*(cj14)*(r10)*(x165)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x165)))+(((cj13)*(r01)*(sj14)*(x164)))+(((r12)*(sj13)*(x165)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x164))));
evalcond[3]=((((cj13)*(r02)*(x164)))+(((r01)*(sj13)*(sj14)*(x164)))+(((cj14)*(r10)*(sj13)*(x165)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x165)))+(((-1.00000000000000)*(cj13)*(r12)*(x165)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x164))));
evalcond[4]=((((cj10)*(sj11)))+(((r12)*(sj13)*(x164)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x164)))+(((cj13)*(cj14)*(r10)*(x164)))+(((cj13)*(cj14)*(r00)*(x165)))+(((r02)*(sj13)*(x165)))+(((cj11)*(sj10)))+(((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x165))));
evalcond[5]=((((cj14)*(r10)*(sj13)*(x164)))+(((-1.00000000000000)*(cj13)*(r02)*(x165)))+(((-1.00000000000000)*(cj13)*(r12)*(x164)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x165)))+(((cj14)*(r00)*(sj13)*(x165)))+(((-1.00000000000000)*(sj10)*(sj11)))+(((cj10)*(cj11)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x164))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst33)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst33)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst33)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[4];
IKReal x166=IKsin(j9);
IKReal x167=IKcos(j9);
evalcond[0]=((1.00000000000000)+(((r00)*(sj14)*(x166)))+(((-1.00000000000000)*(r10)*(sj14)*(x167)))+(((-1.00000000000000)*(cj14)*(r11)*(x167)))+(((cj14)*(r01)*(x166))));
evalcond[1]=((((-1.00000000000000)*(cj14)*(r11)*(x166)))+(((-1.00000000000000)*(r00)*(sj14)*(x167)))+(((-1.00000000000000)*(cj14)*(r01)*(x167)))+(((-1.00000000000000)*(r10)*(sj14)*(x166))));
evalcond[2]=((((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x166)))+(((cj13)*(cj14)*(r10)*(x167)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x167)))+(((r12)*(sj13)*(x167)))+(((-1.00000000000000)*(r02)*(sj13)*(x166)))+(((cj13)*(r01)*(sj14)*(x166))));
evalcond[3]=((((-1.00000000000000)*(cj13)*(r12)*(x167)))+(((r01)*(sj13)*(sj14)*(x166)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x167)))+(((cj13)*(r02)*(x166)))+(((cj14)*(r10)*(sj13)*(x167)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x166))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst36;
gconst36=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst36)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst36)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst36)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x168=IKsin(j10);
IKReal x169=IKcos(j10);
IKReal x170=((cj11)*(x168));
IKReal x171=((sj11)*(x169));
IKReal x172=((cj11)*(x169));
IKReal x173=((sj11)*(x168));
evalcond[0]=((x173)+(((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(x172))));
evalcond[1]=((x171)+(x170)+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((x171)+(x170)+(((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(x172)+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(x173)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j12)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((0.0800000000000000)+(((-4.00000000000000)*(npy)*(sj13)*(sj14)))+(((-4.00000000000000)*(cj13)*(npz)))+(((4.00000000000000)*(cj14)*(npx)*(sj13)))+(((-0.320000000000000)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-4.00000000000000)*(npy)*(sj13)*(sj14)))+(((-4.00000000000000)*(cj13)*(npz)))+(((4.00000000000000)*(cj14)*(npx)*(sj13)))+(((-0.320000000000000)*(sj13)))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((0.0800000000000000)+(((-4.00000000000000)*(npy)*(sj13)*(sj14)))+(((-4.00000000000000)*(cj13)*(npz)))+(((4.00000000000000)*(cj14)*(npx)*(sj13)))+(((-0.320000000000000)*(sj13)))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[2];
evalcond[0]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
evalcond[1]=((-0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz)))+(((0.250000000000000)*(IKsin(j11)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst38;
IKReal x174=(sj14)*(sj14);
IKReal x175=(cj14)*(cj14);
gconst38=IKsign(((((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x174)*((r00)*(r00))))+(((-1.00000000000000)*(x175)*((r11)*(r11))))+(((-1.00000000000000)*(x175)*((r01)*(r01))))+(((-1.00000000000000)*(x174)*((r10)*(r10))))));
IKReal x176=(sj14)*(sj14);
IKReal x177=(cj14)*(cj14);
dummyeval[0]=((((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x176)*((r10)*(r10))))+(((-1.00000000000000)*(x177)*((r01)*(r01))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x176)*((r00)*(r00))))+(((-1.00000000000000)*(x177)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst39;
gconst39=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst39)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst39)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst39)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[2];
IKReal x178=IKsin(j10);
IKReal x179=IKcos(j10);
evalcond[0]=((((sj11)*(x178)))+(((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(cj11)*(x179))));
evalcond[1]=((((-1.00000000000000)*(sj11)*(x179)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((-1.00000000000000)*(cj11)*(x178)))+(((cj13)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst40;
IKReal x180=(sj14)*(sj14);
IKReal x181=(cj14)*(cj14);
gconst40=IKsign(((((-1.00000000000000)*(x181)*((r01)*(r01))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x181)*((r11)*(r11))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x180)*((r10)*(r10))))+(((-1.00000000000000)*(x180)*((r00)*(r00))))));
IKReal x182=(sj14)*(sj14);
IKReal x183=(cj14)*(cj14);
dummyeval[0]=((((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x182)*((r00)*(r00))))+(((-1.00000000000000)*(x183)*((r01)*(r01))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x183)*((r11)*(r11))))+(((-1.00000000000000)*(x182)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst40)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst40)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst40)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x184=IKsin(j9);
IKReal x185=IKcos(j9);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(r10)*(sj14)*(x185)))+(((-1.00000000000000)*(cj14)*(r11)*(x185)))+(((r00)*(sj14)*(x184)))+(((cj14)*(r01)*(x184))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj14)*(x185)))+(((-1.00000000000000)*(cj14)*(r11)*(x184)))+(((-1.00000000000000)*(cj14)*(r01)*(x185)))+(((-1.00000000000000)*(r10)*(sj14)*(x184))));
evalcond[2]=((((cj13)*(cj14)*(r10)*(x185)))+(((cj13)*(r01)*(sj14)*(x184)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x185)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x184)))+(((-1.00000000000000)*(r02)*(sj13)*(x184)))+(((r12)*(sj13)*(x185))));
evalcond[3]=((((r01)*(sj13)*(sj14)*(x184)))+(((-1.00000000000000)*(cj13)*(r12)*(x185)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x185)))+(((cj13)*(r02)*(x184)))+(((cj14)*(r10)*(sj13)*(x185)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x184))));
evalcond[4]=((((cj13)*(cj14)*(r00)*(x185)))+(((cj10)*(sj11)))+(((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x185)))+(((r02)*(sj13)*(x185)))+(((r12)*(sj13)*(x184)))+(((cj11)*(sj10)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x184)))+(((cj13)*(cj14)*(r10)*(x184))));
evalcond[5]=((((-1.00000000000000)*(cj13)*(r02)*(x185)))+(((cj14)*(r00)*(sj13)*(x185)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x185)))+(((sj10)*(sj11)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x184)))+(((-1.00000000000000)*(cj13)*(r12)*(x184)))+(((-1.00000000000000)*(cj10)*(cj11)))+(((cj14)*(r10)*(sj13)*(x184))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst38)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst38)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst38)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[4];
IKReal x186=IKsin(j9);
IKReal x187=IKcos(j9);
evalcond[0]=((-1.00000000000000)+(((r00)*(sj14)*(x186)))+(((-1.00000000000000)*(cj14)*(r11)*(x187)))+(((cj14)*(r01)*(x186)))+(((-1.00000000000000)*(r10)*(sj14)*(x187))));
evalcond[1]=((((-1.00000000000000)*(cj14)*(r11)*(x186)))+(((-1.00000000000000)*(r00)*(sj14)*(x187)))+(((-1.00000000000000)*(r10)*(sj14)*(x186)))+(((-1.00000000000000)*(cj14)*(r01)*(x187))));
evalcond[2]=((((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x187)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x186)))+(((-1.00000000000000)*(r02)*(sj13)*(x186)))+(((cj13)*(cj14)*(r10)*(x187)))+(((r12)*(sj13)*(x187)))+(((cj13)*(r01)*(sj14)*(x186))));
evalcond[3]=((((r01)*(sj13)*(sj14)*(x186)))+(((cj13)*(r02)*(x186)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x187)))+(((-1.00000000000000)*(cj13)*(r12)*(x187)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x186)))+(((cj14)*(r10)*(sj13)*(x187))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst41;
gconst41=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst41)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst41)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst41)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x188=IKsin(j10);
IKReal x189=IKcos(j10);
IKReal x190=((cj11)*(x188));
IKReal x191=((sj11)*(x189));
IKReal x192=((sj11)*(x188));
IKReal x193=((cj11)*(x189));
evalcond[0]=((((-1.00000000000000)*(x193)))+(((-1.00000000000000)*(r22)*(sj13)))+(x192)+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((-1.00000000000000)*(x191)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((-1.00000000000000)*(x190)))+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(x191)+(x190)+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((-1.00000000000000)*(x193)))+(((cj14)*(cj9)*(r00)*(sj13)))+(x192)+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IKabs(cj12) != 0)?((IKReal)1/(cj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0800000000000000)*(cj12)))+(((-0.320000000000000)*(sj12)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj12) != 0)?((IKReal)1/(cj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0800000000000000)*(cj12)))+(((-0.320000000000000)*(sj12)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14)))))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IKabs(cj12) != 0)?((IKReal)1/(cj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0800000000000000)*(cj12)))+(((-0.320000000000000)*(sj12)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14)))))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[3];
IKReal x194=IKsin(j11);
evalcond[0]=((((cj14)*(npy)))+(((0.250000000000000)*(sj12)*(x194)))+(((-0.0800000000000000)*(cj12)))+(((npx)*(sj14)))+(((-0.0200000000000000)*(sj12))));
evalcond[1]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
evalcond[2]=((((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0200000000000000)*(cj12)))+(((cj13)*(npz)))+(((-0.250000000000000)*(cj12)*(x194)))+(((-0.0800000000000000)*(sj12))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11))))));
dummyeval[0]=((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x195=(cj14)*(cj14);
IKReal x196=(sj14)*(sj14);
gconst1=IKsign(((((cj13)*(r00)*(r11)*(x196)))+(((cj13)*(r00)*(r11)*(x195)))+(((cj14)*(r02)*(r11)*(sj13)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x195)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x196)))+(((r02)*(r10)*(sj13)*(sj14)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14)))));
IKReal x197=(cj14)*(cj14);
IKReal x198=(sj14)*(sj14);
dummyeval[0]=((((cj13)*(r00)*(r11)*(x197)))+(((cj13)*(r00)*(r11)*(x198)))+(((cj14)*(r02)*(r11)*(sj13)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x197)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((r02)*(r10)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x198)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j12)), 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz)))+(((-0.250000000000000)*(sj11))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst7;
IKReal x199=(sj14)*(sj14);
IKReal x200=(cj14)*(cj14);
gconst7=IKsign(((((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x199)*((r10)*(r10))))+(((x200)*((r01)*(r01))))+(((x199)*((r00)*(r00))))+(((x200)*((r11)*(r11))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))));
IKReal x201=(sj14)*(sj14);
IKReal x202=(cj14)*(cj14);
dummyeval[0]=((((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x202)*((r01)*(r01))))+(((x201)*((r10)*(r10))))+(((x201)*((r00)*(r00))))+(((x202)*((r11)*(r11))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst8;
gconst8=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst8)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst8)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst8)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[2];
IKReal x203=IKsin(j10);
IKReal x204=IKcos(j10);
evalcond[0]=((((sj11)*(x203)))+(((-1.00000000000000)*(r22)*(sj13)))+(((-1.00000000000000)*(cj11)*(x204)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj11)*(x203)))+(((sj11)*(x204)))+(((cj13)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst9;
IKReal x205=(sj14)*(sj14);
IKReal x206=(cj14)*(cj14);
gconst9=IKsign(((((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x206)*((r11)*(r11))))+(((x206)*((r01)*(r01))))+(((x205)*((r10)*(r10))))+(((x205)*((r00)*(r00))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))));
IKReal x207=(sj14)*(sj14);
IKReal x208=(cj14)*(cj14);
dummyeval[0]=((((x207)*((r00)*(r00))))+(((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x208)*((r01)*(r01))))+(((x207)*((r10)*(r10))))+(((x208)*((r11)*(r11))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst9)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst9)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst9)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x209=IKsin(j9);
IKReal x210=IKcos(j9);
evalcond[0]=((1.00000000000000)+(((r00)*(sj14)*(x209)))+(((cj14)*(r01)*(x209)))+(((-1.00000000000000)*(r10)*(sj14)*(x210)))+(((-1.00000000000000)*(cj14)*(r11)*(x210))));
evalcond[1]=((((-1.00000000000000)*(cj14)*(r11)*(x209)))+(((-1.00000000000000)*(cj14)*(r01)*(x210)))+(((-1.00000000000000)*(r00)*(sj14)*(x210)))+(((-1.00000000000000)*(r10)*(sj14)*(x209))));
evalcond[2]=((((r12)*(sj13)*(x210)))+(((cj13)*(cj14)*(r10)*(x210)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x209)))+(((-1.00000000000000)*(r02)*(sj13)*(x209)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x210)))+(((cj13)*(r01)*(sj14)*(x209))));
evalcond[3]=((((cj13)*(r02)*(x209)))+(((cj14)*(r10)*(sj13)*(x210)))+(((-1.00000000000000)*(cj13)*(r12)*(x210)))+(((r01)*(sj13)*(sj14)*(x209)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x210)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x209))));
evalcond[4]=((((cj10)*(sj11)))+(((r12)*(sj13)*(x209)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x209)))+(((cj13)*(cj14)*(r10)*(x209)))+(((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x210)))+(((cj13)*(cj14)*(r00)*(x210)))+(((r02)*(sj13)*(x210)))+(((cj11)*(sj10))));
evalcond[5]=((((-1.00000000000000)*(cj13)*(r02)*(x210)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x209)))+(((-1.00000000000000)*(sj10)*(sj11)))+(((cj10)*(cj11)))+(((-1.00000000000000)*(cj13)*(r12)*(x209)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x210)))+(((cj14)*(r00)*(sj13)*(x210)))+(((cj14)*(r10)*(sj13)*(x209))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst7)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst7)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[4];
IKReal x211=IKsin(j9);
IKReal x212=IKcos(j9);
evalcond[0]=((1.00000000000000)+(((cj14)*(r01)*(x211)))+(((r00)*(sj14)*(x211)))+(((-1.00000000000000)*(cj14)*(r11)*(x212)))+(((-1.00000000000000)*(r10)*(sj14)*(x212))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj14)*(x212)))+(((-1.00000000000000)*(r10)*(sj14)*(x211)))+(((-1.00000000000000)*(cj14)*(r01)*(x212)))+(((-1.00000000000000)*(cj14)*(r11)*(x211))));
evalcond[2]=((((r12)*(sj13)*(x212)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x212)))+(((cj13)*(cj14)*(r10)*(x212)))+(((cj13)*(r01)*(sj14)*(x211)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x211)))+(((-1.00000000000000)*(r02)*(sj13)*(x211))));
evalcond[3]=((((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x212)))+(((cj14)*(r10)*(sj13)*(x212)))+(((cj13)*(r02)*(x211)))+(((-1.00000000000000)*(cj13)*(r12)*(x212)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x211)))+(((r01)*(sj13)*(sj14)*(x211))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst10)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst10)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst10)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x213=IKsin(j10);
IKReal x214=IKcos(j10);
IKReal x215=((cj11)*(x213));
IKReal x216=((sj11)*(x214));
IKReal x217=((cj11)*(x214));
IKReal x218=((sj11)*(x213));
evalcond[0]=((((-1.00000000000000)*(x217)))+(((-1.00000000000000)*(r22)*(sj13)))+(x218)+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((x215)+(x216)+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(x215)+(x216)+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(x217)+(((-1.00000000000000)*(x218)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j12)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((-0.0200000000000000)+(((0.250000000000000)*(sj11)))+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst11;
IKReal x219=(sj14)*(sj14);
IKReal x220=(cj14)*(cj14);
gconst11=IKsign(((((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x219)*((r00)*(r00))))+(((-1.00000000000000)*(x220)*((r11)*(r11))))+(((-1.00000000000000)*(x219)*((r10)*(r10))))+(((-1.00000000000000)*(x220)*((r01)*(r01))))));
IKReal x221=(sj14)*(sj14);
IKReal x222=(cj14)*(cj14);
dummyeval[0]=((((-1.00000000000000)*(x222)*((r01)*(r01))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x221)*((r00)*(r00))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x222)*((r11)*(r11))))+(((-1.00000000000000)*(x221)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst12;
gconst12=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst12)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst12)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst12)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[2];
IKReal x223=IKsin(j10);
IKReal x224=IKcos(j10);
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(cj11)*(x224)))+(((sj11)*(x223))));
evalcond[1]=((((-1.00000000000000)*(cj11)*(x223)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((-1.00000000000000)*(sj11)*(x224)))+(((cj13)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst13;
IKReal x225=(sj14)*(sj14);
IKReal x226=(cj14)*(cj14);
gconst13=IKsign(((((-1.00000000000000)*(x225)*((r10)*(r10))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x225)*((r00)*(r00))))+(((-1.00000000000000)*(x226)*((r01)*(r01))))+(((-1.00000000000000)*(x226)*((r11)*(r11))))));
IKReal x227=(sj14)*(sj14);
IKReal x228=(cj14)*(cj14);
dummyeval[0]=((((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x228)*((r11)*(r11))))+(((-1.00000000000000)*(x227)*((r10)*(r10))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x227)*((r00)*(r00))))+(((-1.00000000000000)*(x228)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst13)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst13)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x229=IKsin(j9);
IKReal x230=IKcos(j9);
evalcond[0]=((-1.00000000000000)+(((r00)*(sj14)*(x229)))+(((-1.00000000000000)*(r10)*(sj14)*(x230)))+(((cj14)*(r01)*(x229)))+(((-1.00000000000000)*(cj14)*(r11)*(x230))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj14)*(x230)))+(((-1.00000000000000)*(cj14)*(r01)*(x230)))+(((-1.00000000000000)*(r10)*(sj14)*(x229)))+(((-1.00000000000000)*(cj14)*(r11)*(x229))));
evalcond[2]=((((cj13)*(cj14)*(r10)*(x230)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x229)))+(((cj13)*(r01)*(sj14)*(x229)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x230)))+(((r12)*(sj13)*(x230)))+(((-1.00000000000000)*(r02)*(sj13)*(x229))));
evalcond[3]=((((cj13)*(r02)*(x229)))+(((-1.00000000000000)*(cj13)*(r12)*(x230)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x230)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x229)))+(((r01)*(sj13)*(sj14)*(x229)))+(((cj14)*(r10)*(sj13)*(x230))));
evalcond[4]=((((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x230)))+(((cj10)*(sj11)))+(((cj13)*(cj14)*(r00)*(x230)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x229)))+(((r02)*(sj13)*(x230)))+(((cj11)*(sj10)))+(((cj13)*(cj14)*(r10)*(x229)))+(((r12)*(sj13)*(x229))));
evalcond[5]=((((cj14)*(r00)*(sj13)*(x230)))+(((-1.00000000000000)*(cj13)*(r02)*(x230)))+(((cj14)*(r10)*(sj13)*(x229)))+(((sj10)*(sj11)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x230)))+(((-1.00000000000000)*(cj13)*(r12)*(x229)))+(((-1.00000000000000)*(cj10)*(cj11)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x229))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst11)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst11)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[4];
IKReal x231=IKsin(j9);
IKReal x232=IKcos(j9);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(cj14)*(r11)*(x232)))+(((cj14)*(r01)*(x231)))+(((r00)*(sj14)*(x231)))+(((-1.00000000000000)*(r10)*(sj14)*(x232))));
evalcond[1]=((((-1.00000000000000)*(cj14)*(r11)*(x231)))+(((-1.00000000000000)*(r10)*(sj14)*(x231)))+(((-1.00000000000000)*(cj14)*(r01)*(x232)))+(((-1.00000000000000)*(r00)*(sj14)*(x232))));
evalcond[2]=((((-1.00000000000000)*(r02)*(sj13)*(x231)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x232)))+(((cj13)*(cj14)*(r10)*(x232)))+(((cj13)*(r01)*(sj14)*(x231)))+(((r12)*(sj13)*(x232)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x231))));
evalcond[3]=((((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x232)))+(((cj14)*(r10)*(sj13)*(x232)))+(((-1.00000000000000)*(cj13)*(r12)*(x232)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x231)))+(((cj13)*(r02)*(x231)))+(((r01)*(sj13)*(sj14)*(x231))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst14;
gconst14=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst14)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst14)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst14)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x233=IKsin(j10);
IKReal x234=IKcos(j10);
IKReal x235=((cj11)*(x233));
IKReal x236=((sj11)*(x234));
IKReal x237=((sj11)*(x233));
IKReal x238=((cj11)*(x234));
evalcond[0]=((((-1.00000000000000)*(x238)))+(((-1.00000000000000)*(r22)*(sj13)))+(x237)+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((-1.00000000000000)*(x235)))+(((-1.00000000000000)*(x236)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((x236)+(x235)+(((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((-1.00000000000000)*(x238)))+(x237)+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst1)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst1)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13)))))), ((gconst1)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[3];
IKReal x239=IKsin(j9);
IKReal x240=IKcos(j9);
evalcond[0]=((cj12)+(((r00)*(sj14)*(x239)))+(((-1.00000000000000)*(cj14)*(r11)*(x240)))+(((-1.00000000000000)*(r10)*(sj14)*(x240)))+(((cj14)*(r01)*(x239))));
evalcond[1]=((((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x239)))+(((-1.00000000000000)*(r02)*(sj13)*(x239)))+(((cj13)*(r01)*(sj14)*(x239)))+(((cj13)*(cj14)*(r10)*(x240)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x240)))+(((r12)*(sj13)*(x240))));
evalcond[2]=((((cj13)*(r02)*(x239)))+(((r01)*(sj13)*(sj14)*(x239)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x240)))+(((cj14)*(r10)*(sj13)*(x240)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x239)))+(((-1.00000000000000)*(cj13)*(r12)*(x240)))+(sj12));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11))))));
dummyeval[0]=((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j12)), 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[5]=((0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz)))+(((-0.250000000000000)*(sj11))));
evalcond[6]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[7]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[8]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst4)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst4)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x241=IKsin(j10);
IKReal x242=IKcos(j10);
IKReal x243=((cj11)*(x241));
IKReal x244=((sj11)*(x242));
IKReal x245=((cj11)*(x242));
IKReal x246=((sj11)*(x241));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(x246)+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(x245))));
evalcond[1]=((((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(x243)+(x244)+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(x243)+(x244)+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(x245)+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(x246)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j12)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((-1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[5]=((-0.0200000000000000)+(((0.250000000000000)*(sj11)))+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
evalcond[6]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[7]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[8]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst5)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst5)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst5)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x247=IKsin(j10);
IKReal x248=IKcos(j10);
IKReal x249=((cj11)*(x247));
IKReal x250=((sj11)*(x248));
IKReal x251=((sj11)*(x247));
IKReal x252=((cj11)*(x248));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(x251)+(((-1.00000000000000)*(x252)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((-1.00000000000000)*(x249)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((-1.00000000000000)*(x250)))+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(x250)+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(x249)+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(x251)+(((-1.00000000000000)*(x252)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst3)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst3)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14)))))), ((gconst3)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[6];
IKReal x253=IKsin(j10);
IKReal x254=IKcos(j10);
evalcond[0]=((((r20)*(sj14)))+(((-1.00000000000000)*(sj11)*(sj12)*(x254)))+(((-1.00000000000000)*(cj11)*(sj12)*(x253)))+(((cj14)*(r21))));
evalcond[1]=((((sj11)*(x253)))+(((-1.00000000000000)*(r22)*(sj13)))+(((-1.00000000000000)*(cj11)*(x254)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[2]=((((cj11)*(cj12)*(x253)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj12)*(sj11)*(x254)))+(((cj13)*(r22))));
evalcond[3]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((sj11)*(sj12)*(x253)))+(((-1.00000000000000)*(cj11)*(sj12)*(x254)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[4]=((((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((sj11)*(x254)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9)))+(((cj11)*(x253))));
evalcond[5]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(cj12)*(sj11)*(x253)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((cj11)*(cj12)*(x254)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst2)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst2)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14)))))), ((gconst2)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[3];
IKReal x255=IKsin(j10);
IKReal x256=IKcos(j10);
evalcond[0]=((((r20)*(sj14)))+(((cj14)*(r21)))+(((-1.00000000000000)*(sj11)*(sj12)*(x256)))+(((-1.00000000000000)*(cj11)*(sj12)*(x255))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj13)))+(((sj11)*(x255)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(cj11)*(x256))));
evalcond[2]=((((cj11)*(cj12)*(x255)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj12)*(sj11)*(x256)))+(((cj13)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x257=(cj14)*(cj14);
IKReal x258=(sj14)*(sj14);
gconst6=IKsign(((((cj13)*(r00)*(r11)*(x258)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x258)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x257)))+(((cj14)*(r02)*(r11)*(sj13)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((cj13)*(r00)*(r11)*(x257)))+(((r02)*(r10)*(sj13)*(sj14)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14)))));
IKReal x259=(cj14)*(cj14);
IKReal x260=(sj14)*(sj14);
dummyeval[0]=((((-1.00000000000000)*(cj13)*(r01)*(r10)*(x259)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x260)))+(((cj14)*(r02)*(r11)*(sj13)))+(((cj13)*(r00)*(r11)*(x259)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((r02)*(r10)*(sj13)*(sj14)))+(((cj13)*(r00)*(r11)*(x260)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst6)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst6)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13)))))), ((gconst6)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x261=IKsin(j9);
IKReal x262=IKcos(j9);
evalcond[0]=((((r00)*(sj14)*(x261)))+(((cj14)*(r01)*(x261)))+(cj12)+(((-1.00000000000000)*(r10)*(sj14)*(x262)))+(((-1.00000000000000)*(cj14)*(r11)*(x262))));
evalcond[1]=((((-1.00000000000000)*(cj14)*(r11)*(x261)))+(((-1.00000000000000)*(cj14)*(r01)*(x262)))+(((-1.00000000000000)*(cj10)*(cj11)*(sj12)))+(((sj10)*(sj11)*(sj12)))+(((-1.00000000000000)*(r00)*(sj14)*(x262)))+(((-1.00000000000000)*(r10)*(sj14)*(x261))));
evalcond[2]=((((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x261)))+(((-1.00000000000000)*(r02)*(sj13)*(x261)))+(((r12)*(sj13)*(x262)))+(((cj13)*(cj14)*(r10)*(x262)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x262)))+(((cj13)*(r01)*(sj14)*(x261))));
evalcond[3]=((((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x262)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x261)))+(((r01)*(sj13)*(sj14)*(x261)))+(((cj13)*(r02)*(x261)))+(sj12)+(((-1.00000000000000)*(cj13)*(r12)*(x262)))+(((cj14)*(r10)*(sj13)*(x262))));
evalcond[4]=((((r02)*(sj13)*(x262)))+(((cj13)*(cj14)*(r00)*(x262)))+(((cj10)*(sj11)))+(((cj13)*(cj14)*(r10)*(x261)))+(((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x262)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x261)))+(((r12)*(sj13)*(x261)))+(((cj11)*(sj10))));
evalcond[5]=((((-1.00000000000000)*(cj12)*(sj10)*(sj11)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x261)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x262)))+(((-1.00000000000000)*(cj13)*(r12)*(x261)))+(((-1.00000000000000)*(cj13)*(r02)*(x262)))+(((cj14)*(r00)*(sj13)*(x262)))+(((cj10)*(cj11)*(cj12)))+(((cj14)*(r10)*(sj13)*(x261))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IKabs(sj12) != 0)?((IKReal)1/(sj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))+(((0.0800000000000000)*(sj12)))+(((0.320000000000000)*(cj12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj12) != 0)?((IKReal)1/(sj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))+(((0.0800000000000000)*(sj12)))+(((0.320000000000000)*(cj12)))))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IKabs(sj12) != 0)?((IKReal)1/(sj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))+(((0.0800000000000000)*(sj12)))+(((0.320000000000000)*(cj12)))))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[3];
IKReal x263=IKsin(j11);
evalcond[0]=((((0.250000000000000)*(sj12)*(x263)))+(((cj14)*(npy)))+(((-0.0800000000000000)*(cj12)))+(((npx)*(sj14)))+(((-0.0200000000000000)*(sj12))));
evalcond[1]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
evalcond[2]=((((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0200000000000000)*(cj12)))+(((cj13)*(npz)))+(((-0.250000000000000)*(cj12)*(x263)))+(((-0.0800000000000000)*(sj12))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11))))));
dummyeval[0]=((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x264=(cj14)*(cj14);
IKReal x265=(sj14)*(sj14);
gconst1=IKsign(((((cj14)*(r02)*(r11)*(sj13)))+(((cj13)*(r00)*(r11)*(x265)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x265)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((r02)*(r10)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x264)))+(((cj13)*(r00)*(r11)*(x264)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14)))));
IKReal x266=(cj14)*(cj14);
IKReal x267=(sj14)*(sj14);
dummyeval[0]=((((-1.00000000000000)*(cj13)*(r01)*(r10)*(x267)))+(((cj13)*(r00)*(r11)*(x266)))+(((cj14)*(r02)*(r11)*(sj13)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x266)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((cj13)*(r00)*(r11)*(x267)))+(((r02)*(r10)*(sj13)*(sj14)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j12)), 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz)))+(((-0.250000000000000)*(sj11))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst7;
IKReal x268=(sj14)*(sj14);
IKReal x269=(cj14)*(cj14);
gconst7=IKsign(((((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x269)*((r01)*(r01))))+(((x268)*((r10)*(r10))))+(((x269)*((r11)*(r11))))+(((x268)*((r00)*(r00))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))));
IKReal x270=(sj14)*(sj14);
IKReal x271=(cj14)*(cj14);
dummyeval[0]=((((x270)*((r10)*(r10))))+(((x270)*((r00)*(r00))))+(((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x271)*((r11)*(r11))))+(((x271)*((r01)*(r01))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst8;
gconst8=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst8)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst8)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst8)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[2];
IKReal x272=IKsin(j10);
IKReal x273=IKcos(j10);
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(((sj11)*(x272)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(cj11)*(x273))));
evalcond[1]=((((sj11)*(x273)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj11)*(x272)))+(((cj13)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst9;
IKReal x274=(sj14)*(sj14);
IKReal x275=(cj14)*(cj14);
gconst9=IKsign(((((x275)*((r11)*(r11))))+(((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x274)*((r10)*(r10))))+(((x275)*((r01)*(r01))))+(((x274)*((r00)*(r00))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))));
IKReal x276=(sj14)*(sj14);
IKReal x277=(cj14)*(cj14);
dummyeval[0]=((((2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((x276)*((r00)*(r00))))+(((x276)*((r10)*(r10))))+(((x277)*((r01)*(r01))))+(((2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((x277)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst9)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst9)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst9)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x278=IKsin(j9);
IKReal x279=IKcos(j9);
evalcond[0]=((1.00000000000000)+(((r00)*(sj14)*(x278)))+(((-1.00000000000000)*(r10)*(sj14)*(x279)))+(((-1.00000000000000)*(cj14)*(r11)*(x279)))+(((cj14)*(r01)*(x278))));
evalcond[1]=((((-1.00000000000000)*(cj14)*(r11)*(x278)))+(((-1.00000000000000)*(cj14)*(r01)*(x279)))+(((-1.00000000000000)*(r00)*(sj14)*(x279)))+(((-1.00000000000000)*(r10)*(sj14)*(x278))));
evalcond[2]=((((r12)*(sj13)*(x279)))+(((-1.00000000000000)*(r02)*(sj13)*(x278)))+(((cj13)*(cj14)*(r10)*(x279)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x278)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x279)))+(((cj13)*(r01)*(sj14)*(x278))));
evalcond[3]=((((cj13)*(r02)*(x278)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x278)))+(((-1.00000000000000)*(cj13)*(r12)*(x279)))+(((r01)*(sj13)*(sj14)*(x278)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x279)))+(((cj14)*(r10)*(sj13)*(x279))));
evalcond[4]=((((r12)*(sj13)*(x278)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x278)))+(((cj10)*(sj11)))+(((cj13)*(cj14)*(r10)*(x278)))+(((r02)*(sj13)*(x279)))+(((cj13)*(cj14)*(r00)*(x279)))+(((cj11)*(sj10)))+(((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x279))));
evalcond[5]=((((-1.00000000000000)*(cj13)*(r12)*(x278)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x279)))+(((-1.00000000000000)*(sj10)*(sj11)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x278)))+(((-1.00000000000000)*(cj13)*(r02)*(x279)))+(((cj10)*(cj11)))+(((cj14)*(r10)*(sj13)*(x278)))+(((cj14)*(r00)*(sj13)*(x279))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst7)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst7)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[4];
IKReal x280=IKsin(j9);
IKReal x281=IKcos(j9);
evalcond[0]=((1.00000000000000)+(((cj14)*(r01)*(x280)))+(((-1.00000000000000)*(r10)*(sj14)*(x281)))+(((-1.00000000000000)*(cj14)*(r11)*(x281)))+(((r00)*(sj14)*(x280))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj14)*(x281)))+(((-1.00000000000000)*(cj14)*(r11)*(x280)))+(((-1.00000000000000)*(cj14)*(r01)*(x281)))+(((-1.00000000000000)*(r10)*(sj14)*(x280))));
evalcond[2]=((((-1.00000000000000)*(r02)*(sj13)*(x280)))+(((cj13)*(cj14)*(r10)*(x281)))+(((cj13)*(r01)*(sj14)*(x280)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x280)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x281)))+(((r12)*(sj13)*(x281))));
evalcond[3]=((((cj13)*(r02)*(x280)))+(((-1.00000000000000)*(cj13)*(r12)*(x281)))+(((cj14)*(r10)*(sj13)*(x281)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x280)))+(((r01)*(sj13)*(sj14)*(x280)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x281))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst10)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst10)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst10)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x282=IKsin(j10);
IKReal x283=IKcos(j10);
IKReal x284=((cj11)*(x282));
IKReal x285=((sj11)*(x283));
IKReal x286=((cj11)*(x283));
IKReal x287=((sj11)*(x282));
evalcond[0]=((x287)+(((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(x286))));
evalcond[1]=((x285)+(x284)+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((x285)+(x284)+(((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(x286)+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(x287)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j12)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((-0.0200000000000000)+(((0.250000000000000)*(sj11)))+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst11;
IKReal x288=(sj14)*(sj14);
IKReal x289=(cj14)*(cj14);
gconst11=IKsign(((((-1.00000000000000)*(x288)*((r10)*(r10))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x289)*((r01)*(r01))))+(((-1.00000000000000)*(x289)*((r11)*(r11))))+(((-1.00000000000000)*(x288)*((r00)*(r00))))));
IKReal x290=(sj14)*(sj14);
IKReal x291=(cj14)*(cj14);
dummyeval[0]=((((-1.00000000000000)*(x291)*((r11)*(r11))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x290)*((r10)*(r10))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x291)*((r01)*(r01))))+(((-1.00000000000000)*(x290)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst12;
gconst12=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst12)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst12)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst12)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[2];
IKReal x292=IKsin(j10);
IKReal x293=IKcos(j10);
evalcond[0]=((((-1.00000000000000)*(cj11)*(x293)))+(((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((sj11)*(x292)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((-1.00000000000000)*(cj11)*(x292)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((-1.00000000000000)*(sj11)*(x293)))+(((cj13)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst13;
IKReal x294=(sj14)*(sj14);
IKReal x295=(cj14)*(cj14);
gconst13=IKsign(((((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x294)*((r10)*(r10))))+(((-1.00000000000000)*(x295)*((r01)*(r01))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x294)*((r00)*(r00))))+(((-1.00000000000000)*(x295)*((r11)*(r11))))));
IKReal x296=(sj14)*(sj14);
IKReal x297=(cj14)*(cj14);
dummyeval[0]=((((-1.00000000000000)*(x296)*((r10)*(r10))))+(((-1.00000000000000)*(x297)*((r11)*(r11))))+(((-2.00000000000000)*(cj14)*(r00)*(r01)*(sj14)))+(((-1.00000000000000)*(x297)*((r01)*(r01))))+(((-2.00000000000000)*(cj14)*(r10)*(r11)*(sj14)))+(((-1.00000000000000)*(x296)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst13)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst13)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x298=IKsin(j9);
IKReal x299=IKcos(j9);
evalcond[0]=((-1.00000000000000)+(((cj14)*(r01)*(x298)))+(((-1.00000000000000)*(cj14)*(r11)*(x299)))+(((r00)*(sj14)*(x298)))+(((-1.00000000000000)*(r10)*(sj14)*(x299))));
evalcond[1]=((((-1.00000000000000)*(cj14)*(r11)*(x298)))+(((-1.00000000000000)*(r10)*(sj14)*(x298)))+(((-1.00000000000000)*(cj14)*(r01)*(x299)))+(((-1.00000000000000)*(r00)*(sj14)*(x299))));
evalcond[2]=((((cj13)*(r01)*(sj14)*(x298)))+(((cj13)*(cj14)*(r10)*(x299)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x298)))+(((-1.00000000000000)*(r02)*(sj13)*(x298)))+(((r12)*(sj13)*(x299)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x299))));
evalcond[3]=((((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x299)))+(((r01)*(sj13)*(sj14)*(x298)))+(((-1.00000000000000)*(cj13)*(r12)*(x299)))+(((cj13)*(r02)*(x298)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x298)))+(((cj14)*(r10)*(sj13)*(x299))));
evalcond[4]=((((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x299)))+(((cj10)*(sj11)))+(((cj13)*(cj14)*(r00)*(x299)))+(((r12)*(sj13)*(x298)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x298)))+(((cj13)*(cj14)*(r10)*(x298)))+(((r02)*(sj13)*(x299)))+(((cj11)*(sj10))));
evalcond[5]=((((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x298)))+(((sj10)*(sj11)))+(((cj14)*(r00)*(sj13)*(x299)))+(((-1.00000000000000)*(cj13)*(r02)*(x299)))+(((-1.00000000000000)*(cj10)*(cj11)))+(((cj14)*(r10)*(sj13)*(x298)))+(((-1.00000000000000)*(cj13)*(r12)*(x298)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x299))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst11)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((r10)*(sj14)))+(((cj14)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj14)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)))))), ((gconst11)*(((((r10)*(sj14)))+(((cj14)*(r11)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[4];
IKReal x300=IKsin(j9);
IKReal x301=IKcos(j9);
evalcond[0]=((-1.00000000000000)+(((cj14)*(r01)*(x300)))+(((r00)*(sj14)*(x300)))+(((-1.00000000000000)*(cj14)*(r11)*(x301)))+(((-1.00000000000000)*(r10)*(sj14)*(x301))));
evalcond[1]=((((-1.00000000000000)*(cj14)*(r01)*(x301)))+(((-1.00000000000000)*(r10)*(sj14)*(x300)))+(((-1.00000000000000)*(r00)*(sj14)*(x301)))+(((-1.00000000000000)*(cj14)*(r11)*(x300))));
evalcond[2]=((((r12)*(sj13)*(x301)))+(((-1.00000000000000)*(r02)*(sj13)*(x300)))+(((cj13)*(r01)*(sj14)*(x300)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x300)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x301)))+(((cj13)*(cj14)*(r10)*(x301))));
evalcond[3]=((((cj13)*(r02)*(x300)))+(((-1.00000000000000)*(cj13)*(r12)*(x301)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x300)))+(((r01)*(sj13)*(sj14)*(x300)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x301)))+(((cj14)*(r10)*(sj13)*(x301))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst14;
gconst14=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst14)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst14)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst14)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x302=IKsin(j10);
IKReal x303=IKcos(j10);
IKReal x304=((cj11)*(x302));
IKReal x305=((sj11)*(x303));
IKReal x306=((sj11)*(x302));
IKReal x307=((cj11)*(x303));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(x306)+(((-1.00000000000000)*(x307)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((-1.00000000000000)*(x304)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((-1.00000000000000)*(x305)))+(((cj13)*(r22))));
evalcond[2]=((x304)+(x305)+(((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(x306)+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(x307)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst1)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst1)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13)))))), ((gconst1)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[3];
IKReal x308=IKsin(j9);
IKReal x309=IKcos(j9);
evalcond[0]=((((r00)*(sj14)*(x308)))+(cj12)+(((-1.00000000000000)*(cj14)*(r11)*(x309)))+(((cj14)*(r01)*(x308)))+(((-1.00000000000000)*(r10)*(sj14)*(x309))));
evalcond[1]=((((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x309)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x308)))+(((r12)*(sj13)*(x309)))+(((cj13)*(cj14)*(r10)*(x309)))+(((cj13)*(r01)*(sj14)*(x308)))+(((-1.00000000000000)*(r02)*(sj13)*(x308))));
evalcond[2]=((((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x308)))+(((cj14)*(r10)*(sj13)*(x309)))+(((-1.00000000000000)*(cj13)*(r12)*(x309)))+(((r01)*(sj13)*(sj14)*(x308)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x309)))+(sj12)+(((cj13)*(r02)*(x308))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11))))));
dummyeval[0]=((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j12)), 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[5]=((0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz)))+(((-0.250000000000000)*(sj11))));
evalcond[6]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[7]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[8]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst4)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst4)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x310=IKsin(j10);
IKReal x311=IKcos(j10);
IKReal x312=((cj11)*(x310));
IKReal x313=((sj11)*(x311));
IKReal x314=((cj11)*(x311));
IKReal x315=((sj11)*(x310));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(((-1.00000000000000)*(x314)))+(x315)+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((x313)+(x312)+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(x313)+(x312)+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(x315)))+(x314)+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j12)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((-1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[5]=((-0.0200000000000000)+(((0.250000000000000)*(sj11)))+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
evalcond[6]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[7]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[8]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst5)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst5)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst5)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x316=IKsin(j10);
IKReal x317=IKcos(j10);
IKReal x318=((cj11)*(x316));
IKReal x319=((sj11)*(x317));
IKReal x320=((sj11)*(x316));
IKReal x321=((cj11)*(x317));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(((-1.00000000000000)*(x321)))+(x320)+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((-1.00000000000000)*(x319)))+(((-1.00000000000000)*(x318)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(x319)+(x318)+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(x321)))+(x320)+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst3)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst3)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14)))))), ((gconst3)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[6];
IKReal x322=IKsin(j10);
IKReal x323=IKcos(j10);
evalcond[0]=((((-1.00000000000000)*(cj11)*(sj12)*(x322)))+(((r20)*(sj14)))+(((-1.00000000000000)*(sj11)*(sj12)*(x323)))+(((cj14)*(r21))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((sj11)*(x322)))+(((-1.00000000000000)*(cj11)*(x323))));
evalcond[2]=((((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj11)*(cj12)*(x322)))+(((cj13)*(r22)))+(((cj12)*(sj11)*(x323))));
evalcond[3]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9)))+(((-1.00000000000000)*(cj11)*(sj12)*(x323)))+(((sj11)*(sj12)*(x322))));
evalcond[4]=((((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((sj11)*(x323)))+(((cj11)*(x322)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[5]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj12)*(sj11)*(x322)))+(((cj11)*(cj12)*(x323)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst2)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst2)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14)))))), ((gconst2)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[3];
IKReal x324=IKsin(j10);
IKReal x325=IKcos(j10);
evalcond[0]=((((r20)*(sj14)))+(((-1.00000000000000)*(cj11)*(sj12)*(x324)))+(((cj14)*(r21)))+(((-1.00000000000000)*(sj11)*(sj12)*(x325))));
evalcond[1]=((((sj11)*(x324)))+(((-1.00000000000000)*(r22)*(sj13)))+(((-1.00000000000000)*(cj11)*(x325)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[2]=((((cj12)*(sj11)*(x325)))+(((cj11)*(cj12)*(x324)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x326=(cj14)*(cj14);
IKReal x327=(sj14)*(sj14);
gconst6=IKsign(((((-1.00000000000000)*(cj13)*(r01)*(r10)*(x327)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x326)))+(((cj14)*(r02)*(r11)*(sj13)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((cj13)*(r00)*(r11)*(x327)))+(((r02)*(r10)*(sj13)*(sj14)))+(((cj13)*(r00)*(r11)*(x326)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14)))));
IKReal x328=(cj14)*(cj14);
IKReal x329=(sj14)*(sj14);
dummyeval[0]=((((-1.00000000000000)*(cj13)*(r01)*(r10)*(x329)))+(((-1.00000000000000)*(cj13)*(r01)*(r10)*(x328)))+(((cj13)*(r00)*(r11)*(x329)))+(((cj14)*(r02)*(r11)*(sj13)))+(((cj13)*(r00)*(r11)*(x328)))+(((-1.00000000000000)*(cj14)*(r01)*(r12)*(sj13)))+(((r02)*(r10)*(sj13)*(sj14)))+(((-1.00000000000000)*(r00)*(r12)*(sj13)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst6)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst6)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13)))))), ((gconst6)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[6];
IKReal x330=IKsin(j9);
IKReal x331=IKcos(j9);
evalcond[0]=((cj12)+(((-1.00000000000000)*(r10)*(sj14)*(x331)))+(((-1.00000000000000)*(cj14)*(r11)*(x331)))+(((r00)*(sj14)*(x330)))+(((cj14)*(r01)*(x330))));
evalcond[1]=((((-1.00000000000000)*(r10)*(sj14)*(x330)))+(((-1.00000000000000)*(cj14)*(r01)*(x331)))+(((-1.00000000000000)*(r00)*(sj14)*(x331)))+(((-1.00000000000000)*(cj10)*(cj11)*(sj12)))+(((sj10)*(sj11)*(sj12)))+(((-1.00000000000000)*(cj14)*(r11)*(x330))));
evalcond[2]=((((cj13)*(cj14)*(r10)*(x331)))+(((cj13)*(r01)*(sj14)*(x330)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x330)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x331)))+(((-1.00000000000000)*(r02)*(sj13)*(x330)))+(((r12)*(sj13)*(x331))));
evalcond[3]=((((r01)*(sj13)*(sj14)*(x330)))+(((-1.00000000000000)*(cj13)*(r12)*(x331)))+(((cj14)*(r10)*(sj13)*(x331)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x330)))+(sj12)+(((cj13)*(r02)*(x330)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x331))));
evalcond[4]=((((cj10)*(sj11)))+(((cj13)*(cj14)*(r10)*(x330)))+(((r12)*(sj13)*(x330)))+(((-1.00000000000000)*(cj13)*(r01)*(sj14)*(x331)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x330)))+(((r02)*(sj13)*(x331)))+(((cj11)*(sj10)))+(((cj13)*(cj14)*(r00)*(x331))));
evalcond[5]=((((-1.00000000000000)*(cj13)*(r02)*(x331)))+(((cj14)*(r10)*(sj13)*(x330)))+(((-1.00000000000000)*(cj13)*(r12)*(x330)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x330)))+(((cj14)*(r00)*(sj13)*(x331)))+(((-1.00000000000000)*(cj12)*(sj10)*(sj11)))+(((-1.00000000000000)*(r01)*(sj13)*(sj14)*(x331)))+(((cj10)*(cj11)*(cj12))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((gconst0)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((gconst0)*(((((-1.00000000000000)*(cj12)*(cj13)*(r11)*(sj14)))+(((cj12)*(cj13)*(cj14)*(r10)))+(((cj12)*(r12)*(sj13)))))), ((gconst0)*(((((-1.00000000000000)*(cj12)*(cj13)*(r01)*(sj14)))+(((cj12)*(r02)*(sj13)))+(((cj12)*(cj13)*(cj14)*(r00)))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IKReal evalcond[3];
IKReal x332=IKsin(j9);
IKReal x333=IKcos(j9);
evalcond[0]=((((cj14)*(r01)*(x332)))+(cj12)+(((r00)*(sj14)*(x332)))+(((-1.00000000000000)*(r10)*(sj14)*(x333)))+(((-1.00000000000000)*(cj14)*(r11)*(x333))));
evalcond[1]=((((cj13)*(cj14)*(r10)*(x333)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(x333)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(x332)))+(((cj13)*(r01)*(sj14)*(x332)))+(((-1.00000000000000)*(r02)*(sj13)*(x332)))+(((r12)*(sj13)*(x333))));
evalcond[2]=((((cj14)*(r10)*(sj13)*(x333)))+(((cj13)*(r02)*(x332)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(x332)))+(((-1.00000000000000)*(cj13)*(r12)*(x333)))+(((r01)*(sj13)*(sj14)*(x332)))+(sj12)+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(x333))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j12)), 6.28318530717959)));
evalcond[1]=((((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[2]=((((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[3]=((-0.0800000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
evalcond[4]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[5]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
evalcond[6]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[2];
evalcond[0]=((-0.0200000000000000)+(((cj14)*(npy)))+(((npx)*(sj14)))+(((0.250000000000000)*(IKsin(j11)))));
evalcond[1]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst18;
gconst18=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst18)*(((((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((cj13)*(cj14)*(r20)*(sj11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst18)*(((((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((cj13)*(cj14)*(r20)*(sj11)))))), ((gconst18)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x334=IKsin(j10);
IKReal x335=IKcos(j10);
IKReal x336=((sj11)*(x334));
IKReal x337=((cj11)*(x335));
IKReal x338=((cj11)*(x334));
IKReal x339=((sj11)*(x335));
evalcond[0]=((((r20)*(sj14)))+(((-1.00000000000000)*(x339)))+(((cj14)*(r21)))+(((-1.00000000000000)*(x338))));
evalcond[1]=((((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(r22)*(sj13)))+(x336)+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[2]=((((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9)))+(x336));
evalcond[3]=((((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(x339)+(x338)+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j12)), 6.28318530717959)));
evalcond[1]=((((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[2]=((((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[3]=((0.0800000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
evalcond[4]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[5]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
evalcond[6]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj14)))+(((4.00000000000000)*(cj14)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj14)))+(((4.00000000000000)*(cj14)*(npy)))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj14)))+(((4.00000000000000)*(cj14)*(npy)))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[2];
evalcond[0]=((0.0200000000000000)+(((cj14)*(npy)))+(((-0.250000000000000)*(IKsin(j11))))+(((npx)*(sj14))));
evalcond[1]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst19;
gconst19=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst19)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst19)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst19)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x340=IKsin(j10);
IKReal x341=IKcos(j10);
IKReal x342=((cj11)*(x341));
IKReal x343=((sj11)*(x340));
IKReal x344=((cj11)*(x340));
IKReal x345=((sj11)*(x341));
evalcond[0]=((((r20)*(sj14)))+(((cj14)*(r21)))+(x344)+(x345));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj13)))+(((-1.00000000000000)*(x342)))+(((cj13)*(r21)*(sj14)))+(x343)+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[2]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9)))+(((-1.00000000000000)*(x343)))+(x342));
evalcond[3]=((((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(x344)+(x345)+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j12)), 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[4]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[5]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((0.0800000000000000)+(((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14)))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((0.0800000000000000)+(((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14)))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[2];
evalcond[0]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
evalcond[1]=((0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((-0.250000000000000)*(IKsin(j11))))+(((cj13)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst20;
gconst20=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst20)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst20)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst20)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x346=IKsin(j10);
IKReal x347=IKcos(j10);
IKReal x348=((cj11)*(x346));
IKReal x349=((sj11)*(x347));
IKReal x350=((cj11)*(x347));
IKReal x351=((sj11)*(x346));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(x351)+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(x350))));
evalcond[1]=((((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(x348)+(x349)+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(x348)+(x349)+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((-1.00000000000000)*(x351)))+(((cj14)*(cj9)*(r00)*(sj13)))+(x350)+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j12)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((-1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[4]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[5]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((0.0800000000000000)+(((-4.00000000000000)*(npy)*(sj13)*(sj14)))+(((-4.00000000000000)*(cj13)*(npz)))+(((4.00000000000000)*(cj14)*(npx)*(sj13)))+(((-0.320000000000000)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-4.00000000000000)*(npy)*(sj13)*(sj14)))+(((-4.00000000000000)*(cj13)*(npz)))+(((4.00000000000000)*(cj14)*(npx)*(sj13)))+(((-0.320000000000000)*(sj13)))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((0.0800000000000000)+(((-4.00000000000000)*(npy)*(sj13)*(sj14)))+(((-4.00000000000000)*(cj13)*(npz)))+(((4.00000000000000)*(cj14)*(npx)*(sj13)))+(((-0.320000000000000)*(sj13)))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[2];
evalcond[0]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
evalcond[1]=((-0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz)))+(((0.250000000000000)*(IKsin(j11)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst21;
gconst21=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst21)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst21)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst21)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x352=IKsin(j10);
IKReal x353=IKcos(j10);
IKReal x354=((cj11)*(x352));
IKReal x355=((sj11)*(x353));
IKReal x356=((sj11)*(x352));
IKReal x357=((cj11)*(x353));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj13)))+(((-1.00000000000000)*(x357)))+(((cj13)*(r21)*(sj14)))+(x356)+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((-1.00000000000000)*(x355)))+(((-1.00000000000000)*(x354)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(x355)+(x354)+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(x357)))+(x356)+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IKabs(cj12) != 0)?((IKReal)1/(cj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0800000000000000)*(cj12)))+(((-0.320000000000000)*(sj12)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj12) != 0)?((IKReal)1/(cj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0800000000000000)*(cj12)))+(((-0.320000000000000)*(sj12)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14)))))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IKabs(cj12) != 0)?((IKReal)1/(cj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0800000000000000)*(cj12)))+(((-0.320000000000000)*(sj12)))+(((4.00000000000000)*(cj13)*(npz)))+(((0.320000000000000)*(sj13)))+(((4.00000000000000)*(npy)*(sj13)*(sj14)))))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[3];
IKReal x358=IKsin(j11);
evalcond[0]=((((cj14)*(npy)))+(((-0.0800000000000000)*(cj12)))+(((0.250000000000000)*(sj12)*(x358)))+(((npx)*(sj14)))+(((-0.0200000000000000)*(sj12))));
evalcond[1]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
evalcond[2]=((((-0.250000000000000)*(cj12)*(x358)))+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0200000000000000)*(cj12)))+(((cj13)*(npz)))+(((-0.0800000000000000)*(sj12))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst15;
gconst15=IKsign(((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11))))));
dummyeval[0]=((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j12)), 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[5]=((0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz)))+(((-0.250000000000000)*(sj11))));
evalcond[6]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[7]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[8]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst16;
gconst16=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst16)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst16)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst16)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x359=IKsin(j10);
IKReal x360=IKcos(j10);
IKReal x361=((cj11)*(x359));
IKReal x362=((sj11)*(x360));
IKReal x363=((cj11)*(x360));
IKReal x364=((sj11)*(x359));
evalcond[0]=((((-1.00000000000000)*(x363)))+(((-1.00000000000000)*(r22)*(sj13)))+(x364)+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((x361)+(x362)+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(x361)+(x362)+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(x363)+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(x364)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j12)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((-1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[5]=((-0.0200000000000000)+(((0.250000000000000)*(sj11)))+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
evalcond[6]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[7]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[8]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst17;
gconst17=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst17)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst17)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst17)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x365=IKsin(j10);
IKReal x366=IKcos(j10);
IKReal x367=((cj11)*(x365));
IKReal x368=((sj11)*(x366));
IKReal x369=((sj11)*(x365));
IKReal x370=((cj11)*(x366));
evalcond[0]=((((-1.00000000000000)*(x370)))+(((-1.00000000000000)*(r22)*(sj13)))+(x369)+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((-1.00000000000000)*(x367)))+(((-1.00000000000000)*(x368)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((((cj13)*(cj14)*(cj9)*(r00)))+(x368)+(x367)+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((-1.00000000000000)*(x370)))+(((cj14)*(cj9)*(r00)*(sj13)))+(x369)+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst15)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst15)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14)))))), ((gconst15)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[6];
IKReal x371=IKsin(j10);
IKReal x372=IKcos(j10);
evalcond[0]=((((r20)*(sj14)))+(((-1.00000000000000)*(cj11)*(sj12)*(x371)))+(((cj14)*(r21)))+(((-1.00000000000000)*(sj11)*(sj12)*(x372))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj13)))+(((sj11)*(x371)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(cj11)*(x372))));
evalcond[2]=((((cj12)*(sj11)*(x372)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj11)*(cj12)*(x371)))+(((cj13)*(r22))));
evalcond[3]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9)))+(((-1.00000000000000)*(cj11)*(sj12)*(x372)))+(((sj11)*(sj12)*(x371))));
evalcond[4]=((((cj11)*(x371)))+(((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((sj11)*(x372)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[5]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj11)*(cj12)*(x372)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj12)*(sj11)*(x371)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IKabs(sj12) != 0)?((IKReal)1/(sj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))+(((0.0800000000000000)*(sj12)))+(((0.320000000000000)*(cj12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj12) != 0)?((IKReal)1/(sj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))+(((0.0800000000000000)*(sj12)))+(((0.320000000000000)*(cj12)))))))+IKsqr(((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IKabs(sj12) != 0)?((IKReal)1/(sj12)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj14)))+(((-4.00000000000000)*(cj14)*(npy)))+(((0.0800000000000000)*(sj12)))+(((0.320000000000000)*(cj12)))))), ((-0.920000000000000)+(((-0.320000000000000)*(cj13)))+(((4.00000000000000)*(cj13)*(cj14)*(npx)))+(((-4.00000000000000)*(cj13)*(npy)*(sj14)))+(((4.00000000000000)*(npz)*(sj13)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IKReal evalcond[3];
IKReal x373=IKsin(j11);
evalcond[0]=((((cj14)*(npy)))+(((0.250000000000000)*(sj12)*(x373)))+(((-0.0800000000000000)*(cj12)))+(((npx)*(sj14)))+(((-0.0200000000000000)*(sj12))));
evalcond[1]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(IKcos(j11)))));
evalcond[2]=((((-0.250000000000000)*(cj12)*(x373)))+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((0.0200000000000000)*(cj12)))+(((cj13)*(npz)))+(((-0.0800000000000000)*(sj12))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst15;
gconst15=IKsign(((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11))))));
dummyeval[0]=((((sj12)*((cj11)*(cj11))))+(((sj12)*((sj11)*(sj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j12)), 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[5]=((0.0200000000000000)+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz)))+(((-0.250000000000000)*(sj11))));
evalcond[6]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[7]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[8]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst16;
gconst16=IKsign(((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11))))));
dummyeval[0]=((((-1.00000000000000)*((sj11)*(sj11))))+(((-1.00000000000000)*((cj11)*(cj11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst16)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst16)*(((((-1.00000000000000)*(r22)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((cj11)*(r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)*(sj11)))+(((cj13)*(r21)*(sj11)*(sj14)))))), ((gconst16)*(((((-1.00000000000000)*(cj11)*(cj13)*(r21)*(sj14)))+(((cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x374=IKsin(j10);
IKReal x375=IKcos(j10);
IKReal x376=((cj11)*(x374));
IKReal x377=((sj11)*(x375));
IKReal x378=((cj11)*(x375));
IKReal x379=((sj11)*(x374));
evalcond[0]=((x379)+(((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(x378))));
evalcond[1]=((x377)+(x376)+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((x377)+(x376)+(((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(x378)+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(x379)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j12)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((cj14)*(npy)))+(((npx)*(sj14))));
evalcond[2]=((((r20)*(sj14)))+(((cj14)*(r21))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj13)))+(((-1.00000000000000)*(npz)*(sj13)))+(((cj13)*(npy)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(npx)))+(((0.250000000000000)*(cj11))));
evalcond[4]=((-1.00000000000000)+(((cj14)*(r01)*(sj9)))+(((-1.00000000000000)*(cj14)*(cj9)*(r11)))+(((-1.00000000000000)*(cj9)*(r10)*(sj14)))+(((r00)*(sj14)*(sj9))));
evalcond[5]=((-0.0200000000000000)+(((0.250000000000000)*(sj11)))+(((npy)*(sj13)*(sj14)))+(((0.0800000000000000)*(sj13)))+(((-1.00000000000000)*(cj14)*(npx)*(sj13)))+(((cj13)*(npz))));
evalcond[6]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9))));
evalcond[7]=((((-1.00000000000000)*(cj13)*(cj9)*(r11)*(sj14)))+(((cj9)*(r12)*(sj13)))+(((-1.00000000000000)*(r02)*(sj13)*(sj9)))+(((cj13)*(r01)*(sj14)*(sj9)))+(((cj13)*(cj14)*(cj9)*(r10)))+(((-1.00000000000000)*(cj13)*(cj14)*(r00)*(sj9))));
evalcond[8]=((((-1.00000000000000)*(cj13)*(cj9)*(r12)))+(((cj14)*(cj9)*(r10)*(sj13)))+(((r01)*(sj13)*(sj14)*(sj9)))+(((cj13)*(r02)*(sj9)))+(((-1.00000000000000)*(cj9)*(r11)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r00)*(sj13)*(sj9))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst17;
gconst17=IKsign((((sj11)*(sj11))+((cj11)*(cj11))));
dummyeval[0]=(((sj11)*(sj11))+((cj11)*(cj11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst17)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst17)*(((((cj11)*(cj13)*(r22)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj14)*(r20)*(sj13)))+(((r22)*(sj11)*(sj13)))+(((cj13)*(cj14)*(r20)*(sj11)))+(((cj11)*(r21)*(sj13)*(sj14)))))), ((gconst17)*(((((-1.00000000000000)*(cj11)*(r22)*(sj13)))+(((-1.00000000000000)*(cj14)*(r20)*(sj11)*(sj13)))+(((cj11)*(cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)))+(((cj13)*(r22)*(sj11)))+(((r21)*(sj11)*(sj13)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x380=IKsin(j10);
IKReal x381=IKcos(j10);
IKReal x382=((cj11)*(x380));
IKReal x383=((sj11)*(x381));
IKReal x384=((sj11)*(x380));
IKReal x385=((cj11)*(x381));
evalcond[0]=((((-1.00000000000000)*(x385)))+(x384)+(((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20))));
evalcond[1]=((((-1.00000000000000)*(x383)))+(((-1.00000000000000)*(x382)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[2]=((x382)+(x383)+(((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[3]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((-1.00000000000000)*(x385)))+(x384)+(((cj14)*(cj9)*(r00)*(sj13)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((gconst15)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst15)*(((((cj13)*(cj14)*(r20)*(sj11)*(sj12)))+(((cj11)*(cj14)*(r21)))+(((cj11)*(r20)*(sj14)))+(((r22)*(sj11)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj13)*(r21)*(sj11)*(sj12)*(sj14)))))), ((gconst15)*(((((cj11)*(cj13)*(r21)*(sj12)*(sj14)))+(((-1.00000000000000)*(cj11)*(r22)*(sj12)*(sj13)))+(((-1.00000000000000)*(cj11)*(cj13)*(cj14)*(r20)*(sj12)))+(((cj14)*(r21)*(sj11)))+(((r20)*(sj11)*(sj14)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[6];
IKReal x386=IKsin(j10);
IKReal x387=IKcos(j10);
evalcond[0]=((((r20)*(sj14)))+(((-1.00000000000000)*(cj11)*(sj12)*(x386)))+(((cj14)*(r21)))+(((-1.00000000000000)*(sj11)*(sj12)*(x387))));
evalcond[1]=((((sj11)*(x386)))+(((-1.00000000000000)*(r22)*(sj13)))+(((cj13)*(r21)*(sj14)))+(((-1.00000000000000)*(cj13)*(cj14)*(r20)))+(((-1.00000000000000)*(cj11)*(x387))));
evalcond[2]=((((cj12)*(sj11)*(x387)))+(((cj11)*(cj12)*(x386)))+(((r21)*(sj13)*(sj14)))+(((-1.00000000000000)*(cj14)*(r20)*(sj13)))+(((cj13)*(r22))));
evalcond[3]=((((-1.00000000000000)*(cj14)*(cj9)*(r01)))+(((-1.00000000000000)*(cj14)*(r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(r00)*(sj14)))+(((-1.00000000000000)*(r10)*(sj14)*(sj9)))+(((-1.00000000000000)*(cj11)*(sj12)*(x387)))+(((sj11)*(sj12)*(x386))));
evalcond[4]=((((cj11)*(x386)))+(((sj11)*(x387)))+(((cj13)*(cj14)*(cj9)*(r00)))+(((r12)*(sj13)*(sj9)))+(((cj9)*(r02)*(sj13)))+(((-1.00000000000000)*(cj13)*(cj9)*(r01)*(sj14)))+(((cj13)*(cj14)*(r10)*(sj9)))+(((-1.00000000000000)*(cj13)*(r11)*(sj14)*(sj9))));
evalcond[5]=((((-1.00000000000000)*(cj9)*(r01)*(sj13)*(sj14)))+(((cj14)*(r10)*(sj13)*(sj9)))+(((cj14)*(cj9)*(r00)*(sj13)))+(((cj11)*(cj12)*(x387)))+(((-1.00000000000000)*(cj13)*(r12)*(sj9)))+(((-1.00000000000000)*(cj13)*(cj9)*(r02)))+(((-1.00000000000000)*(cj12)*(sj11)*(x386)))+(((-1.00000000000000)*(r11)*(sj13)*(sj14)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j9;
solution.basesol[0].indices[0] = _ij9[0];
solution.basesol[0].indices[1] = _ij9[1];
solution.basesol[0].maxsolutions = _nj9;
solution.basesol[1].foffset = j10;
solution.basesol[1].indices[0] = _ij10[0];
solution.basesol[1].indices[1] = _ij10[1];
solution.basesol[1].maxsolutions = _nj10;
solution.basesol[2].foffset = j11;
solution.basesol[2].indices[0] = _ij11[0];
solution.basesol[2].indices[1] = _ij11[1];
solution.basesol[2].maxsolutions = _nj11;
solution.basesol[3].foffset = j12;
solution.basesol[3].indices[0] = _ij12[0];
solution.basesol[3].indices[1] = _ij12[1];
solution.basesol[3].maxsolutions = _nj12;
solution.basesol[4].foffset = j13;
solution.basesol[4].indices[0] = _ij13[0];
solution.basesol[4].indices[1] = _ij13[1];
solution.basesol[4].maxsolutions = _nj13;
solution.basesol[5].foffset = j14;
solution.basesol[5].indices[0] = _ij14[0];
solution.basesol[5].indices[1] = _ij14[1];
solution.basesol[5].maxsolutions = _nj14;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}

static inline bool checkconsistency8(const IKReal* Breal)
{
    IKReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IKReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
{
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IKReal IKFAST_ALIGNED16(A[8*8]);
    IKReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IKReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IKReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IKReal IKFAST_ALIGNED16(wr[16]);
    IKReal IKFAST_ALIGNED16(wi[16]);
    IKReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IKReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IKReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IKReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IKReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "6d8ba5564ca57f0a475823df569cf256"; }

IKFAST_API const char* getIKFastVersion() { return "56"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
