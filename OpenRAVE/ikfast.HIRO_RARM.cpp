/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 56 generated on 2012-08-08 14:38:22.625371
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[4]);
x6=((x0)*(x2)*(x3));
x7=((x0)*(x1)*(x4));
x8=((x7)+(x6));
x9=((-1.00000000000000)*(x8));
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=IKsin(j[3]);
x13=((x11)*(x12));
x14=IKcos(j[3]);
x15=((x0)*(x1)*(x2));
x16=((x0)*(x3)*(x4));
x17=((((-1.00000000000000)*(x16)))+(x15));
x18=((x14)*(x17));
x19=IKcos(j[5]);
x20=((x5)*(x9));
x21=((x13)+(((-1.00000000000000)*(x18))));
x22=((x10)*(x21));
x23=((x20)+(x22));
x24=((-1.00000000000000)*(x23));
x25=IKsin(j[5]);
x26=((x11)*(x14));
x27=((((-1.00000000000000)*(x15)))+(x16));
x28=((x12)*(x27));
x29=((x11)*(x2)*(x3));
x30=((x1)*(x11)*(x4));
x31=((x29)+(x30));
x32=((-1.00000000000000)*(x31));
x33=((x1)*(x11)*(x2));
x34=((x11)*(x3)*(x4));
x35=((((-1.00000000000000)*(x34)))+(x33));
x36=((x14)*(x35));
x37=((x0)*(x12));
x38=((x37)+(x36));
x39=((x2)*(x3));
x40=((x1)*(x4));
x41=((x40)+(x39));
x42=((x3)*(x4));
x43=((x1)*(x2));
x44=((x42)+(((-1.00000000000000)*(x43))));
x45=((x32)*(x5));
x46=((-1.00000000000000)*(x38));
x47=((x10)*(x46));
x48=((x47)+(x45));
x49=((-1.00000000000000)*(x48));
x50=((x0)*(x14));
x51=((((-1.00000000000000)*(x33)))+(x34));
x52=((x12)*(x51));
x53=((x50)+(x52));
x54=((x44)*(x5));
x55=((x10)*(x14)*(x41));
x56=((x55)+(x54));
x57=((-1.00000000000000)*(x56));
x58=((-1.00000000000000)*(x41));
x59=((-1.00000000000000)*(x53));
x60=((0.0800000000000000)*(x29));
x61=((0.0800000000000000)*(x30));
x62=((x60)+(x61));
x63=((-1.00000000000000)*(x62));
x64=((0.0800000000000000)*(x42));
x65=((0.0800000000000000)*(x43));
x66=((x64)+(((-1.00000000000000)*(x65))));
x67=((0.0800000000000000)*(x39));
x68=((0.0800000000000000)*(x40));
x69=((x67)+(x68));
x70=((0.0190000000000000)*(x39));
x71=((0.0190000000000000)*(x40));
x72=((x71)+(x70));
x73=((0.0190000000000000)*(x43));
x74=((0.0190000000000000)*(x42));
x75=((((-1.00000000000000)*(x74)))+(x73));
x76=((0.0190000000000000)*(x29));
x77=((0.0190000000000000)*(x30));
x78=((x77)+(x76));
eerot[0]=((((x10)*(x9)))+(((x5)*(((x18)+(((-1.00000000000000)*(x13))))))));
eerot[1]=((((x24)*(x25)))+(((x19)*(((x28)+(((-1.00000000000000)*(x26))))))));
eerot[2]=((((x19)*(x24)))+(((x25)*(((x26)+(((-1.00000000000000)*(x28))))))));
eetrans[0]=((((x5)*(((((-0.0800000000000000)*(x6)))+(((-0.0800000000000000)*(x7)))))))+(((x10)*(((((0.0800000000000000)*(x13)))+(((-0.0800000000000000)*(x18)))))))+(((-0.0200000000000000)*(x15)))+(((x10)*(((((0.0190000000000000)*(x7)))+(((0.0190000000000000)*(x6)))))))+(((0.0800000000000000)*(x11)))+(((-0.250000000000000)*(x0)*(x3)))+(((-0.230000000000000)*(x7)))+(((0.0200000000000000)*(x16)))+(((x5)*(((((-0.0190000000000000)*(x18)))+(((0.0190000000000000)*(x13)))))))+(((-0.230000000000000)*(x6))));
eerot[3]=((((-0.258820142606703)*(x10)*(x44)))+(((-0.258820142606703)*(x14)*(x5)*(x58)))+(((0.965925532213041)*(x38)*(x5)))+(((0.965925532213041)*(x10)*(x32))));
eerot[4]=((((0.965925532213041)*(x19)*(x53)))+(((-0.258820142606703)*(x25)*(x57)))+(((-0.258820142606703)*(x12)*(x19)*(x41)))+(((0.965925532213041)*(x25)*(x49))));
eerot[5]=((((0.965925532213041)*(x19)*(x49)))+(((0.965925532213041)*(x25)*(x59)))+(((-0.258820142606703)*(x19)*(x57)))+(((-0.258820142606703)*(x12)*(x25)*(x58))));
eetrans[1]=((-0.150000000000000)+(((-0.258820142606703)*(x14)*(x5)*(x72)))+(((-0.0595286327995416)*(x42)))+(((-0.0772740425770433)*(x0)))+(((0.0647050356516757)*(x1)))+(((-0.222162872408999)*(x30)))+(((-0.00517640285213405)*(x40)))+(((0.965925532213041)*(x5)*(x63)))+(((0.0193185106442608)*(x34)))+(((0.965925532213041)*(x10)*(x78)))+(((-0.0193185106442608)*(x33)))+(((-0.258820142606703)*(x10)*(x75)))+(((0.965925532213041)*(x10)*(((((-0.0800000000000000)*(x36)))+(((-0.0800000000000000)*(x37)))))))+(((-0.258820142606703)*(x10)*(x14)*(x69)))+(((0.0595286327995416)*(x43)))+(((-0.222162872408999)*(x29)))+(((-0.00517640285213405)*(x39)))+(((-0.258820142606703)*(x5)*(x66)))+(((-0.241481383053260)*(x11)*(x3)))+(((0.965925532213041)*(x5)*(((((-0.0190000000000000)*(x36)))+(((-0.0190000000000000)*(x37))))))));
eerot[6]=((((0.258820142606703)*(x10)*(x32)))+(((0.258820142606703)*(x38)*(x5)))+(((0.965925532213041)*(x10)*(x44)))+(((0.965925532213041)*(x14)*(x5)*(x58))));
eerot[7]=((((0.965925532213041)*(x12)*(x19)*(x41)))+(((0.258820142606703)*(x25)*(x49)))+(((0.258820142606703)*(x19)*(x53)))+(((0.965925532213041)*(x25)*(x57))));
eerot[8]=((((0.965925532213041)*(x12)*(x25)*(x58)))+(((0.258820142606703)*(x25)*(x59)))+(((0.258820142606703)*(x19)*(x49)))+(((0.965925532213041)*(x19)*(x57))));
eetrans[2]=((0.355000000000000)+(((-0.0647050356516757)*(x11)*(x3)))+(((0.965925532213041)*(x10)*(x75)))+(((-0.241481383053260)*(x1)))+(((-0.00517640285213405)*(x33)))+(((0.0193185106442608)*(x39)))+(((0.0193185106442608)*(x40)))+(((0.965925532213041)*(x5)*(x66)))+(((0.00517640285213405)*(x34)))+(((0.965925532213041)*(x10)*(x14)*(x69)))+(((0.222162872408999)*(x42)))+(((0.258820142606703)*(x5)*(((((-0.0190000000000000)*(x36)))+(((-0.0190000000000000)*(x37)))))))+(((0.965925532213041)*(x14)*(x5)*(x72)))+(((0.258820142606703)*(x5)*(x63)))+(((0.258820142606703)*(x10)*(((((-0.0800000000000000)*(x36)))+(((-0.0800000000000000)*(x37)))))))+(((-0.0595286327995416)*(x30)))+(((-0.222162872408999)*(x43)))+(((-0.0207056114085362)*(x0)))+(((0.258820142606703)*(x10)*(x78)))+(((-0.0595286327995416)*(x29))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j3=numeric_limits<IKReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IKReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IKReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IKReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IKReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IKReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r02));
new_r01=r01;
new_r02=r00;
new_px=((((0.0190000000000000)*(r00)))+(px));
new_r10=((((-0.258820142606703)*(r22)))+(((-0.965925532213041)*(r12))));
new_r11=((((0.258820142606703)*(r21)))+(((0.965925532213041)*(r11))));
new_r12=((((0.965925532213041)*(r10)))+(((0.258820142606703)*(r20))));
new_py=((0.0530076792065767)+(((0.258820142606703)*(pz)))+(((0.00491758270952735)*(r20)))+(((0.965925532213041)*(py)))+(((0.0183525851120478)*(r10))));
new_r20=((((-0.965925532213041)*(r22)))+(((0.258820142606703)*(r12))));
new_r21=((((0.965925532213041)*(r21)))+(((-0.258820142606703)*(r11))));
new_r22=((((0.965925532213041)*(r20)))+(((-0.258820142606703)*(r10))));
new_pz=((-0.381726585326635)+(((-0.00491758270952735)*(r10)))+(((-0.258820142606703)*(py)))+(((0.965925532213041)*(pz)))+(((0.0183525851120478)*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((pz)*(r10)))+(((-1.00000000000000)*(py)*(r20))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((-1.00000000000000)*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((-1.00000000000000)*(py)*(r21))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
IKReal op[72], zeror[48];
int numroots;
IKReal x79=((0.620000000000000)*(npx));
IKReal x80=((0.0400000000000000)*(npz));
IKReal x81=((0.0400000000000000)*(npy));
IKReal x82=((0.0800000000000000)*(r22));
IKReal x83=((0.0800000000000000)*(npx));
IKReal x84=((-1.24000000000000)*(npy));
IKReal x85=((0.0800000000000000)*(r21));
IKReal x86=((0.160000000000000)*(r20));
IKReal x87=((2.00000000000000)*(rxp1_2));
IKReal x88=((-0.0800000000000000)*(r21));
IKReal x89=((rxp0_2)+(x82));
IKReal x90=((0.920000000000000)*(npz));
IKReal x91=((2.00000000000000)*(rxp2_2));
IKReal x92=((0.160000000000000)*(r21));
IKReal x93=((0.320000000000000)*(r21));
IKReal x94=((0.320000000000000)*(r20));
IKReal x95=((-0.00320000000000000)+(x81));
IKReal x96=((0.300000000000000)*(npx));
IKReal x97=((-0.00320000000000000)+(((-1.00000000000000)*(x81))));
IKReal x98=((((-1.00000000000000)*(rxp0_2)))+(x82));
IKReal x99=((0.00640000000000000)+(x95));
IKReal x100=((0.600000000000000)*(npy));
IKReal x101=((0.00320000000000000)+(((-1.00000000000000)*(x81))));
IKReal x102=((pp)+(x80));
IKReal x103=((((-1.00000000000000)*(x82)))+(rxp0_2));
IKReal x104=((-2.00000000000000)*(rxp1_2));
IKReal x105=((-1.00000000000000)*(x89));
op[0]=((-0.0276000000000000)+(((-1.00000000000000)*(x102)))+(x79));
op[1]=x95;
op[2]=x84;
op[3]=x83;
op[4]=((-0.0276000000000000)+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x79))));
op[5]=x97;
op[6]=x105;
op[7]=x85;
op[8]=x87;
op[9]=x86;
op[10]=x103;
op[11]=x88;
op[12]=x99;
op[13]=((-0.0276000000000000)+(x79)+(((-1.00000000000000)*(pp)))+(x80));
op[14]=x83;
op[15]=x84;
op[16]=x101;
op[17]=((-0.0276000000000000)+(((-1.00000000000000)*(x79)))+(((-1.00000000000000)*(pp)))+(x80));
op[18]=x85;
op[19]=x98;
op[20]=x86;
op[21]=x87;
op[22]=x88;
op[23]=x89;
op[24]=((-0.00640000000000000)+(x83)+(x90));
op[25]=0;
op[26]=((-0.160000000000000)*(npy));
op[27]=0;
op[28]=((-0.00640000000000000)+(((-1.00000000000000)*(x83)))+(x90));
op[29]=0;
op[30]=((((-1.00000000000000)*(x91)))+(x86)+(x92));
op[31]=0;
op[32]=((((-1.00000000000000)*(x93)))+(x94));
op[33]=0;
op[34]=((((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x92)))+(((-1.00000000000000)*(x91))));
op[35]=0;
op[36]=0;
op[37]=((0.00640000000000000)+(((-1.00000000000000)*(x83)))+(x90));
op[38]=0;
op[39]=((0.160000000000000)*(npy));
op[40]=0;
op[41]=((0.00640000000000000)+(x83)+(x90));
op[42]=0;
op[43]=((((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x91)))+(x92));
op[44]=0;
op[45]=((x93)+(x94));
op[46]=0;
op[47]=((((-1.00000000000000)*(x92)))+(((-1.00000000000000)*(x91)))+(x86));
op[48]=((0.0460000000000000)+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(pp)))+(x80));
op[49]=x95;
op[50]=x100;
op[51]=x83;
op[52]=((0.0460000000000000)+(((-1.00000000000000)*(pp)))+(x80)+(x96));
op[53]=x97;
op[54]=x89;
op[55]=x85;
op[56]=x104;
op[57]=x86;
op[58]=x98;
op[59]=x88;
op[60]=x99;
op[61]=((0.0460000000000000)+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x96))));
op[62]=x83;
op[63]=x100;
op[64]=x101;
op[65]=((0.0460000000000000)+(((-1.00000000000000)*(x102)))+(x96));
op[66]=x85;
op[67]=x103;
op[68]=x86;
op[69]=x104;
op[70]=x88;
op[71]=x105;
solvedialyticpoly8qep(op,zeror,numroots);
IKReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j6array[16], cj6array[16], sj6array[16];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ij7 += 3)
{
IKReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj6 = zeror[ij7+2];
j7array[numsolutions]=((2.00000000000000)*(atan(htj7)));
j8array[numsolutions]=((2.00000000000000)*(atan(htj8)));
j6array[numsolutions]=((2.00000000000000)*(atan(htj6)));
IKReal x106=(htj7)*(htj7);
IKReal x107=(htj8)*(htj8);
IKReal x108=(htj6)*(htj6);
cj7array[numsolutions]=((((IKabs(((1.00000000000000)+(x106))) != 0)?((IKReal)1/(((1.00000000000000)+(x106)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x106))))));
cj8array[numsolutions]=((((IKabs(((1.00000000000000)+(x107))) != 0)?((IKReal)1/(((1.00000000000000)+(x107)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x107))))));
cj6array[numsolutions]=((((IKabs(((1.00000000000000)+(x108))) != 0)?((IKReal)1/(((1.00000000000000)+(x108)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x108))))));
sj7array[numsolutions]=((2.00000000000000)*(htj7)*(((IKabs(((1.00000000000000)+((htj7)*(htj7)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj7)*(htj7))))):(IKReal)1.0e30)));
sj8array[numsolutions]=((2.00000000000000)*(htj8)*(((IKabs(((1.00000000000000)+((htj8)*(htj8)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj8)*(htj8))))):(IKReal)1.0e30)));
sj6array[numsolutions]=((2.00000000000000)*(htj6)*(((IKabs(((1.00000000000000)+((htj6)*(htj6)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj6)*(htj6))))):(IKReal)1.0e30)));
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j7valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj7 = 16;
_nj8 = 1;
_nj6 = 1;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
_ij8[0] = 0; _ij8[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( !j7valid[iij7] ) { continue; }
if( IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj8array[ij7]-cj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij7]-sj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij7]-cj6array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij7]-sj6array[iij7]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j7valid[iij7]=false; _ij7[1] = iij7; _ij8[1] = 0; _ij6[1] = 0;  break; 
}
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

    j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

    j6 = j6array[ij7]; cj6 = cj6array[ij7]; sj6 = sj6array[ij7];

{
IKReal dummyeval[1];
IKReal gconst0;
IKReal x109=(sj8)*(sj8);
IKReal x110=(cj8)*(cj8);
gconst0=IKsign(((((cj7)*(r00)*(r11)*(x110)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x109)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x109)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x110)))+(((r02)*(r10)*(sj7)*(sj8)))));
IKReal x111=(sj8)*(sj8);
IKReal x112=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x111)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x112)))+(((cj7)*(r00)*(r11)*(x112)))+(((cj7)*(r00)*(r11)*(x111)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
evalcond[2]=((0.0800000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj8)))+(((-4.00000000000000)*(cj8)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj8)))+(((-4.00000000000000)*(cj8)*(npy)))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj8)))+(((-4.00000000000000)*(cj8)*(npy)))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[2];
evalcond[0]=((-0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((0.250000000000000)*(IKsin(j5)))));
evalcond[1]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst24;
gconst24=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst23;
IKReal x113=(sj8)*(sj8);
IKReal x114=(cj8)*(cj8);
gconst23=IKsign(((((cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((r01)*(r10)*(sj7)*(x114)))+(((cj7)*(cj8)*(r02)*(r11)))+(((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x113)))+(((r01)*(r10)*(sj7)*(x113)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x114)))));
IKReal x115=(sj8)*(sj8);
IKReal x116=(cj8)*(cj8);
dummyeval[0]=((((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x115)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x116)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x115)))+(((r01)*(r10)*(sj7)*(x116))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst23)*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst23)*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((gconst23)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x117=IKsin(j3);
IKReal x118=IKcos(j3);
evalcond[0]=((((cj8)*(r01)*(x117)))+(((-1.00000000000000)*(cj8)*(r11)*(x118)))+(((r00)*(sj8)*(x117)))+(((-1.00000000000000)*(r10)*(sj8)*(x118))));
evalcond[1]=((((cj7)*(r01)*(sj8)*(x117)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x118)))+(((-1.00000000000000)*(r02)*(sj7)*(x117)))+(((cj7)*(cj8)*(r10)*(x118)))+(((r12)*(sj7)*(x118)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x117))));
evalcond[2]=((1.00000000000000)+(((cj7)*(r02)*(x117)))+(((r01)*(sj7)*(sj8)*(x117)))+(((cj8)*(r10)*(sj7)*(x118)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x118)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x117)))+(((-1.00000000000000)*(cj7)*(r12)*(x118))));
evalcond[3]=((((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x117)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x118)))+(((-1.00000000000000)*(cj7)*(r12)*(x117)))+(((cj8)*(r10)*(sj7)*(x117)))+(((cj8)*(r00)*(sj7)*(x118)))+(((-1.00000000000000)*(cj7)*(r02)*(x118))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst25;
gconst25=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst25)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r20)*(sj5)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst25)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((cj5)*(r20)*(sj8)))))), ((gconst25)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r20)*(sj5)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x119=IKsin(j4);
IKReal x120=IKcos(j4);
IKReal x121=((sj5)*(x119));
IKReal x122=((cj5)*(x120));
IKReal x123=((cj5)*(x119));
IKReal x124=((sj5)*(x120));
evalcond[0]=((((cj8)*(r21)))+(((r20)*(sj8)))+(((-1.00000000000000)*(x124)))+(((-1.00000000000000)*(x123))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(x121)+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(x122))));
evalcond[2]=((x121)+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(x122)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[3]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(x124)+(x123)+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst24)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r20)*(sj5)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst24)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((cj5)*(r20)*(sj8)))))), ((gconst24)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r20)*(sj5)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[2];
IKReal x125=IKsin(j4);
IKReal x126=IKcos(j4);
evalcond[0]=((((cj8)*(r21)))+(((r20)*(sj8)))+(((-1.00000000000000)*(cj5)*(x125)))+(((-1.00000000000000)*(sj5)*(x126))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(x126)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((sj5)*(x125)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst26;
IKReal x127=(cj8)*(cj8);
IKReal x128=(sj8)*(sj8);
gconst26=IKsign(((((-1.00000000000000)*(x127)*((r01)*(r01))))+(((-1.00000000000000)*(x128)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x128)*((r10)*(r10))))+(((-1.00000000000000)*(x127)*((r11)*(r11))))));
IKReal x129=(cj8)*(cj8);
IKReal x130=(sj8)*(sj8);
dummyeval[0]=((((-1.00000000000000)*(x130)*((r10)*(r10))))+(((-1.00000000000000)*(x129)*((r11)*(r11))))+(((-1.00000000000000)*(x129)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x130)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst26)*(((((-1.00000000000000)*(cj8)*(r11)*(sj4)*(sj5)))+(((-1.00000000000000)*(r10)*(sj4)*(sj5)*(sj8)))+(((cj4)*(cj5)*(r10)*(sj8)))+(((cj4)*(cj5)*(cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((-1.00000000000000)*(r00)*(sj4)*(sj5)*(sj8)))+(((cj4)*(cj5)*(cj8)*(r01)))+(((cj4)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(sj4)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst26)*(((((-1.00000000000000)*(cj8)*(r11)*(sj4)*(sj5)))+(((-1.00000000000000)*(r10)*(sj4)*(sj5)*(sj8)))+(((cj4)*(cj5)*(r10)*(sj8)))+(((cj4)*(cj5)*(cj8)*(r11)))))), ((gconst26)*(((((-1.00000000000000)*(r00)*(sj4)*(sj5)*(sj8)))+(((cj4)*(cj5)*(cj8)*(r01)))+(((cj4)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(sj4)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x131=IKsin(j3);
IKReal x132=IKcos(j3);
evalcond[0]=((((r00)*(sj8)*(x131)))+(((cj8)*(r01)*(x131)))+(((-1.00000000000000)*(r10)*(sj8)*(x132)))+(((-1.00000000000000)*(cj8)*(r11)*(x132))));
evalcond[1]=((((sj4)*(sj5)))+(((-1.00000000000000)*(cj8)*(r11)*(x131)))+(((-1.00000000000000)*(r00)*(sj8)*(x132)))+(((-1.00000000000000)*(cj4)*(cj5)))+(((-1.00000000000000)*(r10)*(sj8)*(x131)))+(((-1.00000000000000)*(cj8)*(r01)*(x132))));
evalcond[2]=((((-1.00000000000000)*(r02)*(sj7)*(x131)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x132)))+(((r12)*(sj7)*(x132)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x131)))+(((cj7)*(cj8)*(r10)*(x132)))+(((cj7)*(r01)*(sj8)*(x131))));
evalcond[3]=((1.00000000000000)+(((r01)*(sj7)*(sj8)*(x131)))+(((-1.00000000000000)*(cj7)*(r12)*(x132)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x132)))+(((cj8)*(r10)*(sj7)*(x132)))+(((cj7)*(r02)*(x131)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x131))));
evalcond[4]=((((cj7)*(cj8)*(r00)*(x132)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x132)))+(((cj7)*(cj8)*(r10)*(x131)))+(((cj5)*(sj4)))+(((r02)*(sj7)*(x132)))+(((r12)*(sj7)*(x131)))+(((cj4)*(sj5)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x131))));
evalcond[5]=((((cj8)*(r10)*(sj7)*(x131)))+(((-1.00000000000000)*(cj7)*(r02)*(x132)))+(((cj8)*(r00)*(sj7)*(x132)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x131)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x132)))+(((-1.00000000000000)*(cj7)*(r12)*(x131))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
evalcond[2]=((-0.0800000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj8)))+(((4.00000000000000)*(cj8)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj8)))+(((4.00000000000000)*(cj8)*(npy)))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj8)))+(((4.00000000000000)*(cj8)*(npy)))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[2];
evalcond[0]=((0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.250000000000000)*(IKsin(j5)))));
evalcond[1]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst29;
gconst29=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst28;
IKReal x133=(sj8)*(sj8);
IKReal x134=(cj8)*(cj8);
gconst28=IKsign(((((r00)*(r11)*(sj7)*(x133)))+(((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x134)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x133)))+(((r00)*(r11)*(sj7)*(x134)))));
IKReal x135=(sj8)*(sj8);
IKReal x136=(cj8)*(cj8);
dummyeval[0]=((((r00)*(r11)*(sj7)*(x136)))+(((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((r00)*(r11)*(sj7)*(x135)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x136)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x135))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst28)*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst28)*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((gconst28)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x137=IKsin(j3);
IKReal x138=IKcos(j3);
evalcond[0]=((((-1.00000000000000)*(r10)*(sj8)*(x138)))+(((cj8)*(r01)*(x137)))+(((-1.00000000000000)*(cj8)*(r11)*(x138)))+(((r00)*(sj8)*(x137))));
evalcond[1]=((((cj7)*(r01)*(sj8)*(x137)))+(((cj7)*(cj8)*(r10)*(x138)))+(((r12)*(sj7)*(x138)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x138)))+(((-1.00000000000000)*(r02)*(sj7)*(x137)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x137))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x138)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x137)))+(((r01)*(sj7)*(sj8)*(x137)))+(((-1.00000000000000)*(cj7)*(r12)*(x138)))+(((cj8)*(r10)*(sj7)*(x138)))+(((cj7)*(r02)*(x137))));
evalcond[3]=((((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x138)))+(((-1.00000000000000)*(cj7)*(r12)*(x137)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x137)))+(((cj8)*(r10)*(sj7)*(x137)))+(((cj8)*(r00)*(sj7)*(x138)))+(((-1.00000000000000)*(cj7)*(r02)*(x138))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst30;
gconst30=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst30)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst30)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))))), ((gconst30)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x139=IKsin(j4);
IKReal x140=IKcos(j4);
IKReal x141=((cj5)*(x140));
IKReal x142=((sj5)*(x139));
IKReal x143=((cj5)*(x139));
IKReal x144=((sj5)*(x140));
evalcond[0]=((((cj8)*(r21)))+(((r20)*(sj8)))+(x143)+(x144));
evalcond[1]=((((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(x142));
evalcond[2]=((((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(x141)+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[3]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8)))+(x143)+(x144));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst29)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst29)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))))), ((gconst29)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[2];
IKReal x145=IKsin(j4);
IKReal x146=IKcos(j4);
evalcond[0]=((((cj8)*(r21)))+(((sj5)*(x146)))+(((r20)*(sj8)))+(((cj5)*(x145))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((sj5)*(x145)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(x146))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst31;
IKReal x147=(cj8)*(cj8);
IKReal x148=(sj8)*(sj8);
gconst31=IKsign(((((-1.00000000000000)*(x148)*((r00)*(r00))))+(((-1.00000000000000)*(x147)*((r01)*(r01))))+(((-1.00000000000000)*(x148)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x147)*((r11)*(r11))))));
IKReal x149=(cj8)*(cj8);
IKReal x150=(sj8)*(sj8);
dummyeval[0]=((((-1.00000000000000)*(x150)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x149)*((r11)*(r11))))+(((-1.00000000000000)*(x150)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x149)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst31)*(((((-1.00000000000000)*(cj4)*(cj5)*(r10)*(sj8)))+(((cj8)*(r11)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj8)*(r11)))+(((r10)*(sj4)*(sj5)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((r00)*(sj4)*(sj5)*(sj8)))+(((cj8)*(r01)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst31)*(((((-1.00000000000000)*(cj4)*(cj5)*(r10)*(sj8)))+(((cj8)*(r11)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj8)*(r11)))+(((r10)*(sj4)*(sj5)*(sj8)))))), ((gconst31)*(((((r00)*(sj4)*(sj5)*(sj8)))+(((cj8)*(r01)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x151=IKsin(j3);
IKReal x152=IKcos(j3);
evalcond[0]=((((-1.00000000000000)*(cj8)*(r11)*(x152)))+(((-1.00000000000000)*(r10)*(sj8)*(x152)))+(((r00)*(sj8)*(x151)))+(((cj8)*(r01)*(x151))));
evalcond[1]=((((-1.00000000000000)*(sj4)*(sj5)))+(((-1.00000000000000)*(r00)*(sj8)*(x152)))+(((-1.00000000000000)*(cj8)*(r11)*(x151)))+(((-1.00000000000000)*(cj8)*(r01)*(x152)))+(((-1.00000000000000)*(r10)*(sj8)*(x151)))+(((cj4)*(cj5))));
evalcond[2]=((((cj7)*(r01)*(sj8)*(x151)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x151)))+(((-1.00000000000000)*(r02)*(sj7)*(x151)))+(((cj7)*(cj8)*(r10)*(x152)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x152)))+(((r12)*(sj7)*(x152))));
evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x151)))+(((-1.00000000000000)*(cj7)*(r12)*(x152)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x152)))+(((cj7)*(r02)*(x151)))+(((r01)*(sj7)*(sj8)*(x151)))+(((cj8)*(r10)*(sj7)*(x152))));
evalcond[4]=((((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x152)))+(((cj5)*(sj4)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x151)))+(((r02)*(sj7)*(x152)))+(((r12)*(sj7)*(x151)))+(((cj7)*(cj8)*(r00)*(x152)))+(((cj4)*(sj5)))+(((cj7)*(cj8)*(r10)*(x151))));
evalcond[5]=((((cj8)*(r10)*(sj7)*(x151)))+(((cj8)*(r00)*(sj7)*(x152)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x151)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x152)))+(((-1.00000000000000)*(cj7)*(r12)*(x151)))+(((-1.00000000000000)*(cj7)*(r02)*(x152))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.0800000000000000)+(((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.0800000000000000)+(((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[2];
evalcond[0]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[1]=((0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7)))+(((-0.250000000000000)*(IKsin(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst33;
IKReal x153=(cj8)*(cj8);
IKReal x154=(sj8)*(sj8);
gconst33=IKsign(((((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x154)*((r10)*(r10))))+(((x153)*((r01)*(r01))))+(((x154)*((r00)*(r00))))+(((x153)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))));
IKReal x155=(cj8)*(cj8);
IKReal x156=(sj8)*(sj8);
dummyeval[0]=((((x156)*((r00)*(r00))))+(((x156)*((r10)*(r10))))+(((x155)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x155)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst34;
gconst34=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst34)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst34)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst34)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[2];
IKReal x157=IKsin(j4);
IKReal x158=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(x158)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((sj5)*(x157))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj5)*(x157)))+(((sj5)*(x158))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst35;
IKReal x159=(cj8)*(cj8);
IKReal x160=(sj8)*(sj8);
gconst35=IKsign(((((x159)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x160)*((r00)*(r00))))+(((x160)*((r10)*(r10))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((x159)*((r01)*(r01))))));
IKReal x161=(cj8)*(cj8);
IKReal x162=(sj8)*(sj8);
dummyeval[0]=((((x161)*((r11)*(r11))))+(((x161)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x162)*((r10)*(r10))))+(((x162)*((r00)*(r00))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst35)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst35)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst35)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x163=IKsin(j3);
IKReal x164=IKcos(j3);
evalcond[0]=((1.00000000000000)+(((r00)*(sj8)*(x163)))+(((-1.00000000000000)*(cj8)*(r11)*(x164)))+(((-1.00000000000000)*(r10)*(sj8)*(x164)))+(((cj8)*(r01)*(x163))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r11)*(x163)))+(((-1.00000000000000)*(r10)*(sj8)*(x163)))+(((-1.00000000000000)*(cj8)*(r01)*(x164)))+(((-1.00000000000000)*(r00)*(sj8)*(x164))));
evalcond[2]=((((r12)*(sj7)*(x164)))+(((-1.00000000000000)*(r02)*(sj7)*(x163)))+(((cj7)*(r01)*(sj8)*(x163)))+(((cj7)*(cj8)*(r10)*(x164)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x163)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x164))));
evalcond[3]=((((r01)*(sj7)*(sj8)*(x163)))+(((-1.00000000000000)*(cj7)*(r12)*(x164)))+(((cj7)*(r02)*(x163)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x163)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x164)))+(((cj8)*(r10)*(sj7)*(x164))));
evalcond[4]=((((cj7)*(cj8)*(r00)*(x164)))+(((cj5)*(sj4)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x164)))+(((cj7)*(cj8)*(r10)*(x163)))+(((r12)*(sj7)*(x163)))+(((r02)*(sj7)*(x164)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x163)))+(((cj4)*(sj5))));
evalcond[5]=((((-1.00000000000000)*(cj7)*(r02)*(x164)))+(((-1.00000000000000)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj7)*(r12)*(x163)))+(((cj8)*(r10)*(sj7)*(x163)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x164)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x163)))+(((cj8)*(r00)*(sj7)*(x164)))+(((cj4)*(cj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst33)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst33)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst33)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x165=IKsin(j3);
IKReal x166=IKcos(j3);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(cj8)*(r11)*(x166)))+(((cj8)*(r01)*(x165)))+(((r00)*(sj8)*(x165)))+(((-1.00000000000000)*(r10)*(sj8)*(x166))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r01)*(x166)))+(((-1.00000000000000)*(r10)*(sj8)*(x165)))+(((-1.00000000000000)*(r00)*(sj8)*(x166)))+(((-1.00000000000000)*(cj8)*(r11)*(x165))));
evalcond[2]=((((r12)*(sj7)*(x166)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x166)))+(((cj7)*(r01)*(sj8)*(x165)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x165)))+(((-1.00000000000000)*(r02)*(sj7)*(x165)))+(((cj7)*(cj8)*(r10)*(x166))));
evalcond[3]=((((cj7)*(r02)*(x165)))+(((r01)*(sj7)*(sj8)*(x165)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x166)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x165)))+(((-1.00000000000000)*(cj7)*(r12)*(x166)))+(((cj8)*(r10)*(sj7)*(x166))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst36;
gconst36=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst36)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst36)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst36)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x167=IKsin(j4);
IKReal x168=IKcos(j4);
IKReal x169=((cj5)*(x167));
IKReal x170=((sj5)*(x168));
IKReal x171=((cj5)*(x168));
IKReal x172=((sj5)*(x167));
evalcond[0]=((x172)+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[1]=((x170)+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(x169));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(x170)+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(x169)+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(x171)+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(x172)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.0800000000000000)+(((-0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8)))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.0800000000000000)+(((-0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[2];
evalcond[0]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[1]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7)))+(((0.250000000000000)*(IKsin(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst38;
IKReal x173=(cj8)*(cj8);
IKReal x174=(sj8)*(sj8);
gconst38=IKsign(((((-1.00000000000000)*(x173)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x174)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x173)*((r11)*(r11))))+(((-1.00000000000000)*(x174)*((r10)*(r10))))));
IKReal x175=(cj8)*(cj8);
IKReal x176=(sj8)*(sj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x176)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x176)*((r00)*(r00))))+(((-1.00000000000000)*(x175)*((r11)*(r11))))+(((-1.00000000000000)*(x175)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst39;
gconst39=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst39)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst39)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst39)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[2];
IKReal x177=IKsin(j4);
IKReal x178=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(x178)))+(((sj5)*(x177)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj5)*(x177)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(sj5)*(x178))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst40;
IKReal x179=(cj8)*(cj8);
IKReal x180=(sj8)*(sj8);
gconst40=IKsign(((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x179)*((r01)*(r01))))+(((-1.00000000000000)*(x180)*((r10)*(r10))))+(((-1.00000000000000)*(x179)*((r11)*(r11))))+(((-1.00000000000000)*(x180)*((r00)*(r00))))));
IKReal x181=(cj8)*(cj8);
IKReal x182=(sj8)*(sj8);
dummyeval[0]=((((-1.00000000000000)*(x181)*((r01)*(r01))))+(((-1.00000000000000)*(x181)*((r11)*(r11))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x182)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x182)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst40)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst40)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst40)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x183=IKsin(j3);
IKReal x184=IKcos(j3);
evalcond[0]=((-1.00000000000000)+(((cj8)*(r01)*(x183)))+(((-1.00000000000000)*(cj8)*(r11)*(x184)))+(((r00)*(sj8)*(x183)))+(((-1.00000000000000)*(r10)*(sj8)*(x184))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj8)*(x184)))+(((-1.00000000000000)*(r10)*(sj8)*(x183)))+(((-1.00000000000000)*(cj8)*(r01)*(x184)))+(((-1.00000000000000)*(cj8)*(r11)*(x183))));
evalcond[2]=((((r12)*(sj7)*(x184)))+(((cj7)*(r01)*(sj8)*(x183)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x183)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x184)))+(((-1.00000000000000)*(r02)*(sj7)*(x183)))+(((cj7)*(cj8)*(r10)*(x184))));
evalcond[3]=((((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x183)))+(((cj8)*(r10)*(sj7)*(x184)))+(((r01)*(sj7)*(sj8)*(x183)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x184)))+(((-1.00000000000000)*(cj7)*(r12)*(x184)))+(((cj7)*(r02)*(x183))));
evalcond[4]=((((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x184)))+(((cj7)*(cj8)*(r00)*(x184)))+(((cj5)*(sj4)))+(((cj7)*(cj8)*(r10)*(x183)))+(((r12)*(sj7)*(x183)))+(((r02)*(sj7)*(x184)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x183)))+(((cj4)*(sj5))));
evalcond[5]=((((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x183)))+(((sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)))+(((-1.00000000000000)*(cj7)*(r12)*(x183)))+(((cj8)*(r10)*(sj7)*(x183)))+(((-1.00000000000000)*(cj7)*(r02)*(x184)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x184)))+(((cj8)*(r00)*(sj7)*(x184))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst38)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst38)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst38)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x185=IKsin(j3);
IKReal x186=IKcos(j3);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(cj8)*(r11)*(x186)))+(((r00)*(sj8)*(x185)))+(((cj8)*(r01)*(x185)))+(((-1.00000000000000)*(r10)*(sj8)*(x186))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj8)*(x186)))+(((-1.00000000000000)*(r10)*(sj8)*(x185)))+(((-1.00000000000000)*(cj8)*(r01)*(x186)))+(((-1.00000000000000)*(cj8)*(r11)*(x185))));
evalcond[2]=((((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x186)))+(((r12)*(sj7)*(x186)))+(((cj7)*(cj8)*(r10)*(x186)))+(((cj7)*(r01)*(sj8)*(x185)))+(((-1.00000000000000)*(r02)*(sj7)*(x185)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x185))));
evalcond[3]=((((r01)*(sj7)*(sj8)*(x185)))+(((cj8)*(r10)*(sj7)*(x186)))+(((-1.00000000000000)*(cj7)*(r12)*(x186)))+(((cj7)*(r02)*(x185)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x185)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x186))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst41;
gconst41=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst41)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst41)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst41)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x187=IKsin(j4);
IKReal x188=IKcos(j4);
IKReal x189=((cj5)*(x187));
IKReal x190=((sj5)*(x188));
IKReal x191=((sj5)*(x187));
IKReal x192=((cj5)*(x188));
evalcond[0]=((((-1.00000000000000)*(x192)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(x191)+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(x189)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(x190))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(x190)+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(x189)+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(x192)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(x191)+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((0.0800000000000000)*(cj6)))+(((0.320000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((0.0800000000000000)*(cj6)))+(((0.320000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((0.0800000000000000)*(cj6)))+(((0.320000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[3];
IKReal x193=IKsin(j5);
evalcond[0]=((((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.0200000000000000)*(sj6)))+(((0.250000000000000)*(sj6)*(x193)))+(((0.0800000000000000)*(cj6))));
evalcond[1]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[2]=((((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-0.250000000000000)*(cj6)*(x193)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0200000000000000)*(cj6)))+(((0.0800000000000000)*(sj7)))+(((0.0800000000000000)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5))))));
dummyeval[0]=((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x194=(sj8)*(sj8);
IKReal x195=(cj8)*(cj8);
gconst1=IKsign(((((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x194)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x194)))+(((cj7)*(r00)*(r11)*(x195)))+(((r02)*(r10)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x195)))));
IKReal x196=(sj8)*(sj8);
IKReal x197=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x197)))+(((cj7)*(r00)*(r11)*(x196)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x196)))+(((r02)*(r10)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x197))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst7;
IKReal x198=(cj8)*(cj8);
IKReal x199=(sj8)*(sj8);
gconst7=IKsign(((((x198)*((r01)*(r01))))+(((x199)*((r10)*(r10))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x199)*((r00)*(r00))))+(((x198)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))));
IKReal x200=(cj8)*(cj8);
IKReal x201=(sj8)*(sj8);
dummyeval[0]=((((x201)*((r10)*(r10))))+(((x200)*((r01)*(r01))))+(((x201)*((r00)*(r00))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x200)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst8;
gconst8=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst8)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst8)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst8)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[2];
IKReal x202=IKsin(j4);
IKReal x203=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((sj5)*(x202)))+(((-1.00000000000000)*(cj5)*(x203)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((sj5)*(x203)))+(((cj5)*(x202))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst9;
IKReal x204=(cj8)*(cj8);
IKReal x205=(sj8)*(sj8);
gconst9=IKsign(((((x204)*((r01)*(r01))))+(((x205)*((r10)*(r10))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x205)*((r00)*(r00))))+(((x204)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))));
IKReal x206=(cj8)*(cj8);
IKReal x207=(sj8)*(sj8);
dummyeval[0]=((((x207)*((r00)*(r00))))+(((x206)*((r11)*(r11))))+(((x206)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x207)*((r10)*(r10))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst9)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst9)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst9)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x208=IKsin(j3);
IKReal x209=IKcos(j3);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(cj8)*(r11)*(x209)))+(((-1.00000000000000)*(r10)*(sj8)*(x209)))+(((r00)*(sj8)*(x208)))+(((cj8)*(r01)*(x208))));
evalcond[1]=((((-1.00000000000000)*(r10)*(sj8)*(x208)))+(((-1.00000000000000)*(r00)*(sj8)*(x209)))+(((-1.00000000000000)*(cj8)*(r01)*(x209)))+(((-1.00000000000000)*(cj8)*(r11)*(x208))));
evalcond[2]=((((-1.00000000000000)*(r02)*(sj7)*(x208)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x208)))+(((r12)*(sj7)*(x209)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x209)))+(((cj7)*(cj8)*(r10)*(x209)))+(((cj7)*(r01)*(sj8)*(x208))));
evalcond[3]=((((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x208)))+(((r01)*(sj7)*(sj8)*(x208)))+(((-1.00000000000000)*(cj7)*(r12)*(x209)))+(((cj7)*(r02)*(x208)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x209)))+(((cj8)*(r10)*(sj7)*(x209))));
evalcond[4]=((((cj7)*(cj8)*(r00)*(x209)))+(((cj5)*(sj4)))+(((r12)*(sj7)*(x208)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x208)))+(((r02)*(sj7)*(x209)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x209)))+(((cj7)*(cj8)*(r10)*(x208)))+(((cj4)*(sj5))));
evalcond[5]=((((-1.00000000000000)*(sj4)*(sj5)))+(((cj8)*(r10)*(sj7)*(x208)))+(((cj8)*(r00)*(sj7)*(x209)))+(((-1.00000000000000)*(cj7)*(r02)*(x209)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x208)))+(((-1.00000000000000)*(cj7)*(r12)*(x208)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x209)))+(((cj4)*(cj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst7)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst7)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x210=IKsin(j3);
IKReal x211=IKcos(j3);
evalcond[0]=((1.00000000000000)+(((r00)*(sj8)*(x210)))+(((-1.00000000000000)*(r10)*(sj8)*(x211)))+(((cj8)*(r01)*(x210)))+(((-1.00000000000000)*(cj8)*(r11)*(x211))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj8)*(x211)))+(((-1.00000000000000)*(cj8)*(r11)*(x210)))+(((-1.00000000000000)*(r10)*(sj8)*(x210)))+(((-1.00000000000000)*(cj8)*(r01)*(x211))));
evalcond[2]=((((cj7)*(cj8)*(r10)*(x211)))+(((r12)*(sj7)*(x211)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x211)))+(((cj7)*(r01)*(sj8)*(x210)))+(((-1.00000000000000)*(r02)*(sj7)*(x210)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x210))));
evalcond[3]=((((-1.00000000000000)*(cj7)*(r12)*(x211)))+(((cj7)*(r02)*(x210)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x211)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x210)))+(((cj8)*(r10)*(sj7)*(x211)))+(((r01)*(sj7)*(sj8)*(x210))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst10)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x212=IKsin(j4);
IKReal x213=IKcos(j4);
IKReal x214=((cj5)*(x212));
IKReal x215=((sj5)*(x213));
IKReal x216=((cj5)*(x213));
IKReal x217=((sj5)*(x212));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj7)))+(x217)+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(x216))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(x214)+(x215)+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(x214)+(x215)+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((-1.00000000000000)*(x217)))+(((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(x216)+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst11;
IKReal x218=(cj8)*(cj8);
IKReal x219=(sj8)*(sj8);
gconst11=IKsign(((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x219)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x218)*((r01)*(r01))))+(((-1.00000000000000)*(x218)*((r11)*(r11))))+(((-1.00000000000000)*(x219)*((r10)*(r10))))));
IKReal x220=(cj8)*(cj8);
IKReal x221=(sj8)*(sj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x221)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x220)*((r11)*(r11))))+(((-1.00000000000000)*(x221)*((r10)*(r10))))+(((-1.00000000000000)*(x220)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst12;
gconst12=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst12)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[2];
IKReal x222=IKsin(j4);
IKReal x223=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(x223)))+(((-1.00000000000000)*(r22)*(sj7)))+(((sj5)*(x222)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(sj5)*(x223)))+(((-1.00000000000000)*(cj5)*(x222)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst13;
IKReal x224=(cj8)*(cj8);
IKReal x225=(sj8)*(sj8);
gconst13=IKsign(((((-1.00000000000000)*(x225)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x225)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x224)*((r01)*(r01))))+(((-1.00000000000000)*(x224)*((r11)*(r11))))));
IKReal x226=(cj8)*(cj8);
IKReal x227=(sj8)*(sj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x227)*((r10)*(r10))))+(((-1.00000000000000)*(x227)*((r00)*(r00))))+(((-1.00000000000000)*(x226)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x226)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst13)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst13)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x228=IKsin(j3);
IKReal x229=IKcos(j3);
evalcond[0]=((-1.00000000000000)+(((cj8)*(r01)*(x228)))+(((-1.00000000000000)*(r10)*(sj8)*(x229)))+(((r00)*(sj8)*(x228)))+(((-1.00000000000000)*(cj8)*(r11)*(x229))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r11)*(x228)))+(((-1.00000000000000)*(r00)*(sj8)*(x229)))+(((-1.00000000000000)*(cj8)*(r01)*(x229)))+(((-1.00000000000000)*(r10)*(sj8)*(x228))));
evalcond[2]=((((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x228)))+(((-1.00000000000000)*(r02)*(sj7)*(x228)))+(((r12)*(sj7)*(x229)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x229)))+(((cj7)*(cj8)*(r10)*(x229)))+(((cj7)*(r01)*(sj8)*(x228))));
evalcond[3]=((((r01)*(sj7)*(sj8)*(x228)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x228)))+(((cj7)*(r02)*(x228)))+(((cj8)*(r10)*(sj7)*(x229)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x229)))+(((-1.00000000000000)*(cj7)*(r12)*(x229))));
evalcond[4]=((((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x229)))+(((cj5)*(sj4)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x228)))+(((r12)*(sj7)*(x228)))+(((r02)*(sj7)*(x229)))+(((cj7)*(cj8)*(r00)*(x229)))+(((cj7)*(cj8)*(r10)*(x228)))+(((cj4)*(sj5))));
evalcond[5]=((((-1.00000000000000)*(cj7)*(r02)*(x229)))+(((-1.00000000000000)*(cj7)*(r12)*(x228)))+(((cj8)*(r00)*(sj7)*(x229)))+(((sj4)*(sj5)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x229)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x228)))+(((-1.00000000000000)*(cj4)*(cj5)))+(((cj8)*(r10)*(sj7)*(x228))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst11)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst11)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x230=IKsin(j3);
IKReal x231=IKcos(j3);
evalcond[0]=((-1.00000000000000)+(((r00)*(sj8)*(x230)))+(((cj8)*(r01)*(x230)))+(((-1.00000000000000)*(cj8)*(r11)*(x231)))+(((-1.00000000000000)*(r10)*(sj8)*(x231))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj8)*(x231)))+(((-1.00000000000000)*(cj8)*(r11)*(x230)))+(((-1.00000000000000)*(cj8)*(r01)*(x231)))+(((-1.00000000000000)*(r10)*(sj8)*(x230))));
evalcond[2]=((((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x231)))+(((r12)*(sj7)*(x231)))+(((-1.00000000000000)*(r02)*(sj7)*(x230)))+(((cj7)*(cj8)*(r10)*(x231)))+(((cj7)*(r01)*(sj8)*(x230)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x230))));
evalcond[3]=((((-1.00000000000000)*(cj7)*(r12)*(x231)))+(((cj7)*(r02)*(x230)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x231)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x230)))+(((r01)*(sj7)*(sj8)*(x230)))+(((cj8)*(r10)*(sj7)*(x231))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst14;
gconst14=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst14)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x232=IKsin(j4);
IKReal x233=IKcos(j4);
IKReal x234=((cj5)*(x232));
IKReal x235=((sj5)*(x233));
IKReal x236=((sj5)*(x232));
IKReal x237=((cj5)*(x233));
evalcond[0]=((x236)+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(x237))));
evalcond[1]=((((-1.00000000000000)*(x235)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(x234))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(x234)+(x235)+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(x236)+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((cj3)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(x237))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst1)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10)))))), ((gconst1)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x238=IKsin(j3);
IKReal x239=IKcos(j3);
evalcond[0]=((((-1.00000000000000)*(cj8)*(r11)*(x239)))+(((r00)*(sj8)*(x238)))+(((-1.00000000000000)*(r10)*(sj8)*(x239)))+(cj6)+(((cj8)*(r01)*(x238))));
evalcond[1]=((((cj7)*(cj8)*(r10)*(x239)))+(((r12)*(sj7)*(x239)))+(((-1.00000000000000)*(r02)*(sj7)*(x238)))+(((cj7)*(r01)*(sj8)*(x238)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x238)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x239))));
evalcond[2]=((((cj8)*(r10)*(sj7)*(x239)))+(((cj7)*(r02)*(x238)))+(sj6)+(((-1.00000000000000)*(cj7)*(r12)*(x239)))+(((r01)*(sj7)*(sj8)*(x238)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x238)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x239))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5))))));
dummyeval[0]=((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[5]=((0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[7]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst4)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst4)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x240=IKsin(j4);
IKReal x241=IKcos(j4);
IKReal x242=((cj5)*(x240));
IKReal x243=((sj5)*(x241));
IKReal x244=((cj5)*(x241));
IKReal x245=((sj5)*(x240));
evalcond[0]=((((-1.00000000000000)*(x244)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(x245));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(x243)+(x242));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8)))+(x243)+(x242));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(x244)+(((cj3)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(x245))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((-1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[7]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst5)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst5)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x246=IKsin(j4);
IKReal x247=IKcos(j4);
IKReal x248=((cj5)*(x246));
IKReal x249=((sj5)*(x247));
IKReal x250=((sj5)*(x246));
IKReal x251=((cj5)*(x247));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(x250)+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(x251))));
evalcond[1]=((((-1.00000000000000)*(x249)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(x248)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8)))+(x249)+(x248));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(x250)+(((-1.00000000000000)*(x251)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst3)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8)))))), ((gconst3)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x252=IKsin(j4);
IKReal x253=IKcos(j4);
evalcond[0]=((((cj8)*(r21)))+(((r20)*(sj8)))+(((-1.00000000000000)*(cj5)*(sj6)*(x252)))+(((-1.00000000000000)*(sj5)*(sj6)*(x253))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((sj5)*(x252)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(x253))));
evalcond[2]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((cj5)*(cj6)*(x252)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj6)*(sj5)*(x253))));
evalcond[3]=((((sj5)*(sj6)*(x252)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj5)*(sj6)*(x253)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[4]=((((sj5)*(x253)))+(((cj3)*(r02)*(sj7)))+(((cj5)*(x252)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[5]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((cj5)*(cj6)*(x253)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj6)*(sj5)*(x252)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst2)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst2)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8)))))), ((gconst2)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x254=IKsin(j4);
IKReal x255=IKcos(j4);
evalcond[0]=((((cj8)*(r21)))+(((-1.00000000000000)*(sj5)*(sj6)*(x255)))+(((r20)*(sj8)))+(((-1.00000000000000)*(cj5)*(sj6)*(x254))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(x255)))+(((-1.00000000000000)*(r22)*(sj7)))+(((sj5)*(x254)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[2]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj5)*(cj6)*(x254)))+(((cj6)*(sj5)*(x255))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x256=(sj8)*(sj8);
IKReal x257=(cj8)*(cj8);
gconst6=IKsign(((((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x257)))+(((cj7)*(r00)*(r11)*(x256)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x257)))+(((r02)*(r10)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x256)))));
IKReal x258=(sj8)*(sj8);
IKReal x259=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x258)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x259)))+(((cj7)*(r00)*(r11)*(x259)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x258)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst6)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst6)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10)))))), ((gconst6)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x260=IKsin(j3);
IKReal x261=IKcos(j3);
evalcond[0]=((((-1.00000000000000)*(cj8)*(r11)*(x261)))+(cj6)+(((r00)*(sj8)*(x260)))+(((cj8)*(r01)*(x260)))+(((-1.00000000000000)*(r10)*(sj8)*(x261))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r11)*(x260)))+(((-1.00000000000000)*(cj8)*(r01)*(x261)))+(((-1.00000000000000)*(r00)*(sj8)*(x261)))+(((-1.00000000000000)*(r10)*(sj8)*(x260)))+(((sj4)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(sj6))));
evalcond[2]=((((-1.00000000000000)*(r02)*(sj7)*(x260)))+(((cj7)*(r01)*(sj8)*(x260)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x260)))+(((r12)*(sj7)*(x261)))+(((cj7)*(cj8)*(r10)*(x261)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x261))));
evalcond[3]=((((-1.00000000000000)*(cj7)*(r12)*(x261)))+(sj6)+(((cj7)*(r02)*(x260)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x260)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x261)))+(((cj8)*(r10)*(sj7)*(x261)))+(((r01)*(sj7)*(sj8)*(x260))));
evalcond[4]=((((cj7)*(cj8)*(r10)*(x260)))+(((cj5)*(sj4)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x261)))+(((r02)*(sj7)*(x261)))+(((r12)*(sj7)*(x260)))+(((cj4)*(sj5)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x260)))+(((cj7)*(cj8)*(r00)*(x261))));
evalcond[5]=((((-1.00000000000000)*(cj6)*(sj4)*(sj5)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x260)))+(((cj8)*(r00)*(sj7)*(x261)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x261)))+(((-1.00000000000000)*(cj7)*(r12)*(x260)))+(((cj8)*(r10)*(sj7)*(x260)))+(((-1.00000000000000)*(cj7)*(r02)*(x261)))+(((cj4)*(cj5)*(cj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj8)))+(((0.0800000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-0.320000000000000)*(cj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj8)))+(((0.0800000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-0.320000000000000)*(cj6)))))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj8)))+(((0.0800000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-0.320000000000000)*(cj6)))))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[3];
IKReal x262=IKsin(j5);
evalcond[0]=((((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.0200000000000000)*(sj6)))+(((0.0800000000000000)*(cj6)))+(((0.250000000000000)*(sj6)*(x262))));
evalcond[1]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[2]=((((npy)*(sj7)*(sj8)))+(((-0.250000000000000)*(cj6)*(x262)))+(((cj7)*(npz)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0200000000000000)*(cj6)))+(((0.0800000000000000)*(sj7)))+(((0.0800000000000000)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5))))));
dummyeval[0]=((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x263=(sj8)*(sj8);
IKReal x264=(cj8)*(cj8);
gconst1=IKsign(((((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x263)))+(((r02)*(r10)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x264)))+(((cj7)*(r00)*(r11)*(x264)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x263)))));
IKReal x265=(sj8)*(sj8);
IKReal x266=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x265)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x266)))+(((cj7)*(r00)*(r11)*(x265)))+(((r02)*(r10)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x266))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst7;
IKReal x267=(cj8)*(cj8);
IKReal x268=(sj8)*(sj8);
gconst7=IKsign(((((x267)*((r01)*(r01))))+(((x267)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x268)*((r10)*(r10))))+(((x268)*((r00)*(r00))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))));
IKReal x269=(cj8)*(cj8);
IKReal x270=(sj8)*(sj8);
dummyeval[0]=((((x270)*((r10)*(r10))))+(((x270)*((r00)*(r00))))+(((x269)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x269)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst8;
gconst8=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst8)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst8)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst8)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[2];
IKReal x271=IKsin(j4);
IKReal x272=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(x272)))+(((sj5)*(x271)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((sj5)*(x272)))+(((cj5)*(x271))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst9;
IKReal x273=(cj8)*(cj8);
IKReal x274=(sj8)*(sj8);
gconst9=IKsign(((((x274)*((r10)*(r10))))+(((x273)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x274)*((r00)*(r00))))+(((x273)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))));
IKReal x275=(cj8)*(cj8);
IKReal x276=(sj8)*(sj8);
dummyeval[0]=((((x275)*((r11)*(r11))))+(((x276)*((r00)*(r00))))+(((x276)*((r10)*(r10))))+(((x275)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst9)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst9)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst9)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x277=IKsin(j3);
IKReal x278=IKcos(j3);
evalcond[0]=((1.00000000000000)+(((cj8)*(r01)*(x277)))+(((r00)*(sj8)*(x277)))+(((-1.00000000000000)*(cj8)*(r11)*(x278)))+(((-1.00000000000000)*(r10)*(sj8)*(x278))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r11)*(x277)))+(((-1.00000000000000)*(r10)*(sj8)*(x277)))+(((-1.00000000000000)*(r00)*(sj8)*(x278)))+(((-1.00000000000000)*(cj8)*(r01)*(x278))));
evalcond[2]=((((r12)*(sj7)*(x278)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x277)))+(((-1.00000000000000)*(r02)*(sj7)*(x277)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x278)))+(((cj7)*(r01)*(sj8)*(x277)))+(((cj7)*(cj8)*(r10)*(x278))));
evalcond[3]=((((cj8)*(r10)*(sj7)*(x278)))+(((r01)*(sj7)*(sj8)*(x277)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x278)))+(((cj7)*(r02)*(x277)))+(((-1.00000000000000)*(cj7)*(r12)*(x278)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x277))));
evalcond[4]=((((cj5)*(sj4)))+(((cj7)*(cj8)*(r00)*(x278)))+(((r02)*(sj7)*(x278)))+(((cj4)*(sj5)))+(((r12)*(sj7)*(x277)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x277)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x278)))+(((cj7)*(cj8)*(r10)*(x277))));
evalcond[5]=((((-1.00000000000000)*(cj7)*(r02)*(x278)))+(((-1.00000000000000)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj7)*(r12)*(x277)))+(((cj8)*(r00)*(sj7)*(x278)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x277)))+(((cj8)*(r10)*(sj7)*(x277)))+(((cj4)*(cj5)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x278))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst7)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst7)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x279=IKsin(j3);
IKReal x280=IKcos(j3);
evalcond[0]=((1.00000000000000)+(((r00)*(sj8)*(x279)))+(((-1.00000000000000)*(r10)*(sj8)*(x280)))+(((-1.00000000000000)*(cj8)*(r11)*(x280)))+(((cj8)*(r01)*(x279))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r01)*(x280)))+(((-1.00000000000000)*(r10)*(sj8)*(x279)))+(((-1.00000000000000)*(cj8)*(r11)*(x279)))+(((-1.00000000000000)*(r00)*(sj8)*(x280))));
evalcond[2]=((((cj7)*(cj8)*(r10)*(x280)))+(((cj7)*(r01)*(sj8)*(x279)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x280)))+(((-1.00000000000000)*(r02)*(sj7)*(x279)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x279)))+(((r12)*(sj7)*(x280))));
evalcond[3]=((((cj8)*(r10)*(sj7)*(x280)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x280)))+(((cj7)*(r02)*(x279)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x279)))+(((-1.00000000000000)*(cj7)*(r12)*(x280)))+(((r01)*(sj7)*(sj8)*(x279))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst10)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x281=IKsin(j4);
IKReal x282=IKcos(j4);
IKReal x283=((cj5)*(x281));
IKReal x284=((sj5)*(x282));
IKReal x285=((cj5)*(x282));
IKReal x286=((sj5)*(x281));
evalcond[0]=((x286)+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[1]=((((cj7)*(r22)))+(x284)+(x283)+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(x284)+(x283)+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(x285)+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(x286)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst11;
IKReal x287=(cj8)*(cj8);
IKReal x288=(sj8)*(sj8);
gconst11=IKsign(((((-1.00000000000000)*(x288)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x287)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x287)*((r11)*(r11))))+(((-1.00000000000000)*(x288)*((r00)*(r00))))));
IKReal x289=(cj8)*(cj8);
IKReal x290=(sj8)*(sj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x290)*((r10)*(r10))))+(((-1.00000000000000)*(x289)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x289)*((r11)*(r11))))+(((-1.00000000000000)*(x290)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst12;
gconst12=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst12)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[2];
IKReal x291=IKsin(j4);
IKReal x292=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(x292)))+(((sj5)*(x291))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(x291)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(sj5)*(x292))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst13;
IKReal x293=(cj8)*(cj8);
IKReal x294=(sj8)*(sj8);
gconst13=IKsign(((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x294)*((r10)*(r10))))+(((-1.00000000000000)*(x294)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x293)*((r01)*(r01))))+(((-1.00000000000000)*(x293)*((r11)*(r11))))));
IKReal x295=(cj8)*(cj8);
IKReal x296=(sj8)*(sj8);
dummyeval[0]=((((-1.00000000000000)*(x296)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x295)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x296)*((r00)*(r00))))+(((-1.00000000000000)*(x295)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst13)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst13)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x297=IKsin(j3);
IKReal x298=IKcos(j3);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(cj8)*(r11)*(x298)))+(((-1.00000000000000)*(r10)*(sj8)*(x298)))+(((cj8)*(r01)*(x297)))+(((r00)*(sj8)*(x297))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj8)*(x298)))+(((-1.00000000000000)*(cj8)*(r01)*(x298)))+(((-1.00000000000000)*(cj8)*(r11)*(x297)))+(((-1.00000000000000)*(r10)*(sj8)*(x297))));
evalcond[2]=((((-1.00000000000000)*(r02)*(sj7)*(x297)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x297)))+(((r12)*(sj7)*(x298)))+(((cj7)*(cj8)*(r10)*(x298)))+(((cj7)*(r01)*(sj8)*(x297)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x298))));
evalcond[3]=((((r01)*(sj7)*(sj8)*(x297)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x298)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x297)))+(((cj7)*(r02)*(x297)))+(((cj8)*(r10)*(sj7)*(x298)))+(((-1.00000000000000)*(cj7)*(r12)*(x298))));
evalcond[4]=((((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x298)))+(((cj5)*(sj4)))+(((r02)*(sj7)*(x298)))+(((cj7)*(cj8)*(r00)*(x298)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x297)))+(((r12)*(sj7)*(x297)))+(((cj4)*(sj5)))+(((cj7)*(cj8)*(r10)*(x297))));
evalcond[5]=((((sj4)*(sj5)))+(((cj8)*(r00)*(sj7)*(x298)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x298)))+(((-1.00000000000000)*(cj4)*(cj5)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x297)))+(((-1.00000000000000)*(cj7)*(r12)*(x297)))+(((-1.00000000000000)*(cj7)*(r02)*(x298)))+(((cj8)*(r10)*(sj7)*(x297))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst11)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((cj8)*(r11)))+(((r10)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((gconst11)*(((((cj8)*(r11)))+(((r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x299=IKsin(j3);
IKReal x300=IKcos(j3);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(r10)*(sj8)*(x300)))+(((r00)*(sj8)*(x299)))+(((-1.00000000000000)*(cj8)*(r11)*(x300)))+(((cj8)*(r01)*(x299))));
evalcond[1]=((((-1.00000000000000)*(r10)*(sj8)*(x299)))+(((-1.00000000000000)*(cj8)*(r11)*(x299)))+(((-1.00000000000000)*(r00)*(sj8)*(x300)))+(((-1.00000000000000)*(cj8)*(r01)*(x300))));
evalcond[2]=((((cj7)*(cj8)*(r10)*(x300)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x299)))+(((r12)*(sj7)*(x300)))+(((cj7)*(r01)*(sj8)*(x299)))+(((-1.00000000000000)*(r02)*(sj7)*(x299)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x300))));
evalcond[3]=((((-1.00000000000000)*(cj7)*(r12)*(x300)))+(((cj8)*(r10)*(sj7)*(x300)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x300)))+(((cj7)*(r02)*(x299)))+(((r01)*(sj7)*(sj8)*(x299)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x299))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst14;
gconst14=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst14)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x301=IKsin(j4);
IKReal x302=IKcos(j4);
IKReal x303=((cj5)*(x301));
IKReal x304=((sj5)*(x302));
IKReal x305=((sj5)*(x301));
IKReal x306=((cj5)*(x302));
evalcond[0]=((x305)+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(x306))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(x304)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(x303))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(x304)+(x303)+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(x305)+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((cj3)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(x306))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst1)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10)))))), ((gconst1)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x307=IKsin(j3);
IKReal x308=IKcos(j3);
evalcond[0]=((((r00)*(sj8)*(x307)))+(((-1.00000000000000)*(cj8)*(r11)*(x308)))+(cj6)+(((-1.00000000000000)*(r10)*(sj8)*(x308)))+(((cj8)*(r01)*(x307))));
evalcond[1]=((((r12)*(sj7)*(x308)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x308)))+(((cj7)*(cj8)*(r10)*(x308)))+(((-1.00000000000000)*(r02)*(sj7)*(x307)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x307)))+(((cj7)*(r01)*(sj8)*(x307))));
evalcond[2]=((((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x307)))+(sj6)+(((-1.00000000000000)*(cj7)*(r12)*(x308)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x308)))+(((r01)*(sj7)*(sj8)*(x307)))+(((cj7)*(r02)*(x307)))+(((cj8)*(r10)*(sj7)*(x308))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5))))));
dummyeval[0]=((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[5]=((0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[7]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst4)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst4)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x309=IKsin(j4);
IKReal x310=IKcos(j4);
IKReal x311=((cj5)*(x309));
IKReal x312=((sj5)*(x310));
IKReal x313=((cj5)*(x310));
IKReal x314=((sj5)*(x309));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(x314)+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(x313))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(x311)+(x312));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(x311)+(x312)+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(x314)))+(x313)+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((-1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[7]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst5)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst5)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x315=IKsin(j4);
IKReal x316=IKcos(j4);
IKReal x317=((cj5)*(x315));
IKReal x318=((sj5)*(x316));
IKReal x319=((sj5)*(x315));
IKReal x320=((cj5)*(x316));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(x319)+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(x320))));
evalcond[1]=((((-1.00000000000000)*(x318)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(x317))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(x318)+(x317)+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(x319)+(((-1.00000000000000)*(x320)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst3)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8)))))), ((gconst3)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x321=IKsin(j4);
IKReal x322=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(sj6)*(x321)))+(((cj8)*(r21)))+(((r20)*(sj8)))+(((-1.00000000000000)*(sj5)*(sj6)*(x322))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj5)*(x322)))+(((sj5)*(x321)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[2]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj6)*(sj5)*(x322)))+(((cj5)*(cj6)*(x321))));
evalcond[3]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((sj5)*(sj6)*(x321)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj5)*(sj6)*(x322)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[4]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((sj5)*(x322)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8)))+(((cj5)*(x321))));
evalcond[5]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((cj5)*(cj6)*(x322)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj6)*(sj5)*(x321)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst2)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst2)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8)))))), ((gconst2)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x323=IKsin(j4);
IKReal x324=IKcos(j4);
evalcond[0]=((((cj8)*(r21)))+(((-1.00000000000000)*(sj5)*(sj6)*(x324)))+(((r20)*(sj8)))+(((-1.00000000000000)*(cj5)*(sj6)*(x323))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj5)*(x324)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((sj5)*(x323))));
evalcond[2]=((((cj5)*(cj6)*(x323)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj6)*(sj5)*(x324))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x325=(sj8)*(sj8);
IKReal x326=(cj8)*(cj8);
gconst6=IKsign(((((cj7)*(r00)*(r11)*(x326)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x325)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x326)))+(((r02)*(r10)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x325)))));
IKReal x327=(sj8)*(sj8);
IKReal x328=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x327)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x327)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x328)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x328)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst6)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst6)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10)))))), ((gconst6)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x329=IKsin(j3);
IKReal x330=IKcos(j3);
evalcond[0]=((((-1.00000000000000)*(cj8)*(r11)*(x330)))+(cj6)+(((cj8)*(r01)*(x329)))+(((r00)*(sj8)*(x329)))+(((-1.00000000000000)*(r10)*(sj8)*(x330))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r11)*(x329)))+(((-1.00000000000000)*(r10)*(sj8)*(x329)))+(((-1.00000000000000)*(r00)*(sj8)*(x330)))+(((-1.00000000000000)*(cj8)*(r01)*(x330)))+(((sj4)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(sj6))));
evalcond[2]=((((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x330)))+(((cj7)*(cj8)*(r10)*(x330)))+(((-1.00000000000000)*(r02)*(sj7)*(x329)))+(((r12)*(sj7)*(x330)))+(((cj7)*(r01)*(sj8)*(x329)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x329))));
evalcond[3]=((((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x330)))+(((cj8)*(r10)*(sj7)*(x330)))+(sj6)+(((-1.00000000000000)*(cj7)*(r12)*(x330)))+(((r01)*(sj7)*(sj8)*(x329)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x329)))+(((cj7)*(r02)*(x329))));
evalcond[4]=((((cj7)*(cj8)*(r00)*(x330)))+(((cj5)*(sj4)))+(((r12)*(sj7)*(x329)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x329)))+(((cj4)*(sj5)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)*(x330)))+(((r02)*(sj7)*(x330)))+(((cj7)*(cj8)*(r10)*(x329))));
evalcond[5]=((((-1.00000000000000)*(cj7)*(r02)*(x330)))+(((-1.00000000000000)*(cj6)*(sj4)*(sj5)))+(((cj8)*(r10)*(sj7)*(x329)))+(((cj8)*(r00)*(sj7)*(x330)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x329)))+(((-1.00000000000000)*(r01)*(sj7)*(sj8)*(x330)))+(((-1.00000000000000)*(cj7)*(r12)*(x329)))+(((cj4)*(cj5)*(cj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst0)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((cj6)*(r12)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r10)))))), ((gconst0)*(((((cj6)*(r02)*(sj7)))+(((-1.00000000000000)*(cj6)*(cj7)*(r01)*(sj8)))+(((cj6)*(cj7)*(cj8)*(r00)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x331=IKsin(j3);
IKReal x332=IKcos(j3);
evalcond[0]=((((r00)*(sj8)*(x331)))+(((-1.00000000000000)*(r10)*(sj8)*(x332)))+(cj6)+(((cj8)*(r01)*(x331)))+(((-1.00000000000000)*(cj8)*(r11)*(x332))));
evalcond[1]=((((cj7)*(r01)*(sj8)*(x331)))+(((-1.00000000000000)*(r02)*(sj7)*(x331)))+(((r12)*(sj7)*(x332)))+(((cj7)*(cj8)*(r10)*(x332)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)*(x332)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(x331))));
evalcond[2]=((sj6)+(((cj8)*(r10)*(sj7)*(x332)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)*(x331)))+(((-1.00000000000000)*(r11)*(sj7)*(sj8)*(x332)))+(((r01)*(sj7)*(sj8)*(x331)))+(((cj7)*(r02)*(x331)))+(((-1.00000000000000)*(cj7)*(r12)*(x332))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j6)), 6.28318530717959)));
evalcond[1]=((((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[2]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
evalcond[3]=((0.0800000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[4]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[5]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj8)))+(((-4.00000000000000)*(cj8)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj8)))+(((-4.00000000000000)*(cj8)*(npy)))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.0800000000000000)+(((-4.00000000000000)*(npx)*(sj8)))+(((-4.00000000000000)*(cj8)*(npy)))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[2];
evalcond[0]=((-0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((0.250000000000000)*(IKsin(j5)))));
evalcond[1]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst18;
gconst18=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst18)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r20)*(sj5)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst18)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((cj5)*(r20)*(sj8)))))), ((gconst18)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r20)*(sj5)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x333=IKsin(j4);
IKReal x334=IKcos(j4);
IKReal x335=((sj5)*(x333));
IKReal x336=((cj5)*(x334));
IKReal x337=((cj5)*(x333));
IKReal x338=((sj5)*(x334));
evalcond[0]=((((cj8)*(r21)))+(((-1.00000000000000)*(x337)))+(((r20)*(sj8)))+(((-1.00000000000000)*(x338))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(x335)+(((-1.00000000000000)*(x336))));
evalcond[2]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(x335)+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(x336)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[3]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8)))+(x338)+(x337));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j6)), 6.28318530717959)));
evalcond[1]=((((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[2]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
evalcond[3]=((-0.0800000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[4]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[5]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj8)))+(((4.00000000000000)*(cj8)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj8)))+(((4.00000000000000)*(cj8)*(npy)))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.0800000000000000)+(((4.00000000000000)*(npx)*(sj8)))+(((4.00000000000000)*(cj8)*(npy)))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[2];
evalcond[0]=((0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.250000000000000)*(IKsin(j5)))));
evalcond[1]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst19;
gconst19=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst19)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst19)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))))), ((gconst19)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x339=IKsin(j4);
IKReal x340=IKcos(j4);
IKReal x341=((cj5)*(x340));
IKReal x342=((sj5)*(x339));
IKReal x343=((cj5)*(x339));
IKReal x344=((sj5)*(x340));
evalcond[0]=((((cj8)*(r21)))+(((r20)*(sj8)))+(x343)+(x344));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(x342)+(((-1.00000000000000)*(x341))));
evalcond[2]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(x342)))+(x341)+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[3]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8)))+(x343)+(x344));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[5]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.0800000000000000)+(((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.0800000000000000)+(((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[2];
evalcond[0]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[1]=((0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7)))+(((-0.250000000000000)*(IKsin(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst20;
gconst20=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst20)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst20)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x345=IKsin(j4);
IKReal x346=IKcos(j4);
IKReal x347=((cj5)*(x345));
IKReal x348=((sj5)*(x346));
IKReal x349=((cj5)*(x346));
IKReal x350=((sj5)*(x345));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(x350)+(((-1.00000000000000)*(x349))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(x347)+(x348));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8)))+(x347)+(x348));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(x349)+(((-1.00000000000000)*(x350)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((-1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[5]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.0800000000000000)+(((-0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0800000000000000)+(((-0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8)))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.0800000000000000)+(((-0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[2];
evalcond[0]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[1]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7)))+(((0.250000000000000)*(IKsin(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst21;
gconst21=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst21)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst21)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst21)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x351=IKsin(j4);
IKReal x352=IKcos(j4);
IKReal x353=((cj5)*(x351));
IKReal x354=((sj5)*(x352));
IKReal x355=((sj5)*(x351));
IKReal x356=((cj5)*(x352));
evalcond[0]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(x355)+(((-1.00000000000000)*(x356))));
evalcond[1]=((((-1.00000000000000)*(x353)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(x354))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8)))+(x353)+(x354));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(x355)+(((-1.00000000000000)*(x356)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((0.0800000000000000)*(cj6)))+(((0.320000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((0.0800000000000000)*(cj6)))+(((0.320000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((0.320000000000000)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))+(((0.0800000000000000)*(cj6)))+(((0.320000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[3];
IKReal x357=IKsin(j5);
evalcond[0]=((((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.0200000000000000)*(sj6)))+(((0.0800000000000000)*(cj6)))+(((0.250000000000000)*(sj6)*(x357))));
evalcond[1]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[2]=((((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-0.250000000000000)*(cj6)*(x357)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0200000000000000)*(cj6)))+(((0.0800000000000000)*(sj7)))+(((0.0800000000000000)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst15;
gconst15=IKsign(((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5))))));
dummyeval[0]=((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[5]=((0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[7]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst16;
gconst16=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst16)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst16)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst16)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x358=IKsin(j4);
IKReal x359=IKcos(j4);
IKReal x360=((cj5)*(x358));
IKReal x361=((sj5)*(x359));
IKReal x362=((cj5)*(x359));
IKReal x363=((sj5)*(x358));
evalcond[0]=((((-1.00000000000000)*(x362)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(x363)+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[1]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(x360)+(x361)+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(x360)+(x361)+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(x363)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(x362)+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((-1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[7]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst17;
gconst17=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst17)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst17)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst17)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x364=IKsin(j4);
IKReal x365=IKcos(j4);
IKReal x366=((cj5)*(x364));
IKReal x367=((sj5)*(x365));
IKReal x368=((sj5)*(x364));
IKReal x369=((cj5)*(x365));
evalcond[0]=((((-1.00000000000000)*(x369)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(x368)+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[1]=((((-1.00000000000000)*(x367)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(x366))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(x366)+(x367)+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(x369)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(x368)+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst15)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8)))))), ((gconst15)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x370=IKsin(j4);
IKReal x371=IKcos(j4);
evalcond[0]=((((cj8)*(r21)))+(((-1.00000000000000)*(cj5)*(sj6)*(x370)))+(((r20)*(sj8)))+(((-1.00000000000000)*(sj5)*(sj6)*(x371))));
evalcond[1]=((((sj5)*(x370)))+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj5)*(x371)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20))));
evalcond[2]=((((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((cj5)*(cj6)*(x370)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj6)*(sj5)*(x371))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(sj6)*(x371)))+(((sj5)*(sj6)*(x370)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[4]=((((cj5)*(x370)))+(((cj3)*(r02)*(sj7)))+(((sj5)*(x371)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[5]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((cj5)*(cj6)*(x371)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((cj3)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj6)*(sj5)*(x370))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj8)))+(((0.0800000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-0.320000000000000)*(cj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj8)))+(((0.0800000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-0.320000000000000)*(cj6)))))))+IKsqr(((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(npx)*(sj8)))+(((0.0800000000000000)*(sj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-0.320000000000000)*(cj6)))))), ((-0.920000000000000)+(((4.00000000000000)*(npz)*(sj7)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((-0.320000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[3];
IKReal x372=IKsin(j5);
evalcond[0]=((((npx)*(sj8)))+(((cj8)*(npy)))+(((0.250000000000000)*(sj6)*(x372)))+(((-0.0200000000000000)*(sj6)))+(((0.0800000000000000)*(cj6))));
evalcond[1]=((0.230000000000000)+(((0.250000000000000)*(IKcos(j5))))+(((0.0800000000000000)*(cj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[2]=((((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-0.250000000000000)*(cj6)*(x372)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0200000000000000)*(cj6)))+(((0.0800000000000000)*(sj7)))+(((0.0800000000000000)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst15;
gconst15=IKsign(((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5))))));
dummyeval[0]=((((sj6)*((sj5)*(sj5))))+(((sj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[5]=((0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((-0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[7]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst16;
gconst16=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst16)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst16)*(((((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst16)*(((((cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))+(((cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x373=IKsin(j4);
IKReal x374=IKcos(j4);
IKReal x375=((cj5)*(x373));
IKReal x376=((sj5)*(x374));
IKReal x377=((cj5)*(x374));
IKReal x378=((sj5)*(x373));
evalcond[0]=((x378)+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(x377))));
evalcond[1]=((x376)+(x375)+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(x376)+(x375)+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(x377)+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((cj3)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(x378))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)));
evalcond[1]=((-0.0800000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.230000000000000)+(((0.0800000000000000)*(cj7)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((-1.00000000000000)*(npz)*(sj7))));
evalcond[4]=((-1.00000000000000)+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8)))+(((cj8)*(r01)*(sj3))));
evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((cj7)*(npz)))+(((0.250000000000000)*(sj5)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.0800000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[7]=((((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((cj7)*(r02)*(sj3)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8)))+(((r01)*(sj3)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst17;
gconst17=IKsign((((sj5)*(sj5))+((cj5)*(cj5))));
dummyeval[0]=(((sj5)*(sj5))+((cj5)*(cj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst17)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst17)*(((((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))))), ((gconst17)*(((((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x379=IKsin(j4);
IKReal x380=IKcos(j4);
IKReal x381=((cj5)*(x379));
IKReal x382=((sj5)*(x380));
IKReal x383=((sj5)*(x379));
IKReal x384=((cj5)*(x380));
evalcond[0]=((x383)+(((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(x384))));
evalcond[1]=((((-1.00000000000000)*(x381)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(x382))));
evalcond[2]=((((cj3)*(r02)*(sj7)))+(x382)+(x381)+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8))));
evalcond[3]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(x383)+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(x384)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst15)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((cj5)*(cj8)*(r21)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((cj5)*(r20)*(sj8)))))), ((gconst15)*(((((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))+(((cj8)*(r21)*(sj5)))+(((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x385=IKsin(j4);
IKReal x386=IKcos(j4);
evalcond[0]=((((cj8)*(r21)))+(((-1.00000000000000)*(sj5)*(sj6)*(x386)))+(((r20)*(sj8)))+(((-1.00000000000000)*(cj5)*(sj6)*(x385))));
evalcond[1]=((((-1.00000000000000)*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)))+(((sj5)*(x385)))+(((-1.00000000000000)*(cj5)*(x386))));
evalcond[2]=((((cj5)*(cj6)*(x385)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj6)*(sj5)*(x386))));
evalcond[3]=((((sj5)*(sj6)*(x385)))+(((-1.00000000000000)*(cj5)*(sj6)*(x386)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(cj3)*(r00)*(sj8))));
evalcond[4]=((((cj3)*(r02)*(sj7)))+(((cj7)*(cj8)*(r10)*(sj3)))+(((-1.00000000000000)*(cj7)*(r11)*(sj3)*(sj8)))+(((r12)*(sj3)*(sj7)))+(((cj3)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj3)*(cj7)*(r01)*(sj8)))+(((cj5)*(x385)))+(((sj5)*(x386))));
evalcond[5]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((cj5)*(cj6)*(x386)))+(((-1.00000000000000)*(cj6)*(sj5)*(x385)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[0].indices[0] = _ij3[0];
solution.basesol[0].indices[1] = _ij3[1];
solution.basesol[0].maxsolutions = _nj3;
solution.basesol[1].foffset = j4;
solution.basesol[1].indices[0] = _ij4[0];
solution.basesol[1].indices[1] = _ij4[1];
solution.basesol[1].maxsolutions = _nj4;
solution.basesol[2].foffset = j5;
solution.basesol[2].indices[0] = _ij5[0];
solution.basesol[2].indices[1] = _ij5[1];
solution.basesol[2].maxsolutions = _nj5;
solution.basesol[3].foffset = j6;
solution.basesol[3].indices[0] = _ij6[0];
solution.basesol[3].indices[1] = _ij6[1];
solution.basesol[3].maxsolutions = _nj6;
solution.basesol[4].foffset = j7;
solution.basesol[4].indices[0] = _ij7[0];
solution.basesol[4].indices[1] = _ij7[1];
solution.basesol[4].maxsolutions = _nj7;
solution.basesol[5].foffset = j8;
solution.basesol[5].indices[0] = _ij8[0];
solution.basesol[5].indices[1] = _ij8[1];
solution.basesol[5].maxsolutions = _nj8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}

static inline bool checkconsistency8(const IKReal* Breal)
{
    IKReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IKReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
{
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IKReal IKFAST_ALIGNED16(A[8*8]);
    IKReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IKReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IKReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IKReal IKFAST_ALIGNED16(wr[16]);
    IKReal IKFAST_ALIGNED16(wi[16]);
    IKReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IKReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IKReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IKReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IKReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "6d88a9176bf990a0bef541fe1dc4ead2"; }

IKFAST_API const char* getIKFastVersion() { return "56"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
